package editeurNXC.parser;

import editeurNXC.langage.SStructure;
import editeurNXC.langage.SInteger;
import editeurNXC.langage.SString;
import editeurNXC.langage.STypeSize;
import editeurNXC.langage.SArray;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class NXCDefs {
    public static final Map<String,SStructure> structures = new HashMap<String,SStructure>();
    public static final Map<String,String> constants = new LinkedHashMap<String,String>();

    static {
        SStructure locStruct;
        locStruct = new SStructure("ColorSensorReadType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Port", new SInteger(STypeSize.U8));
        locStruct.addField("ColorValue", new SInteger(STypeSize.S16));
        locStruct.addField("RawArray", new SArray(new SInteger(STypeSize.U16)));
        locStruct.addField("NormalizedArray", new SArray(new SInteger(STypeSize.U16)));
        locStruct.addField("ScaledArray", new SArray(new SInteger(STypeSize.S16)));
        locStruct.addField("Invalid", new SInteger(STypeSize.U8));
        structures.put("ColorSensorReadType", locStruct);
        locStruct = new SStructure("LocationType");
        locStruct.addField("X", new SInteger(STypeSize.S16));
        locStruct.addField("Y", new SInteger(STypeSize.S16));
        structures.put("LocationType", locStruct);
        locStruct = new SStructure("SizeType");
        locStruct.addField("Width", new SInteger(STypeSize.S16));
        locStruct.addField("Height", new SInteger(STypeSize.S16));
        structures.put("SizeType", locStruct);
        locStruct = new SStructure("DrawTextType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Text", new SString());
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawTextType", locStruct);
        locStruct = new SStructure("DrawPointType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawPointType", locStruct);
        locStruct = new SStructure("DrawLineType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawLineType", locStruct);
        locStruct = new SStructure("DrawCircleType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Size", new SInteger(STypeSize.U8));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawCircleType", locStruct);
        locStruct = new SStructure("DrawRectType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawRectType", locStruct);
        locStruct = new SStructure("DrawGraphicType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Filename", new SString());
        locStruct.addField("Variables", new SArray(new SInteger(STypeSize.S32)));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawGraphicType", locStruct);
        locStruct = new SStructure("SetScreenModeType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("ScreenMode", new SInteger(STypeSize.U32));
        structures.put("SetScreenModeType", locStruct);
        locStruct = new SStructure("DisplayExecuteFunctionType");
        locStruct.addField("Status", new SInteger(STypeSize.U8));
        locStruct.addField("Cmd", new SInteger(STypeSize.U8));
        locStruct.addField("On", new SInteger(STypeSize.U8));
        locStruct.addField("X1", new SInteger(STypeSize.U8));
        locStruct.addField("Y1", new SInteger(STypeSize.U8));
        locStruct.addField("X2", new SInteger(STypeSize.U8));
        locStruct.addField("Y2", new SInteger(STypeSize.U8));
        structures.put("DisplayExecuteFunctionType", locStruct);
        locStruct = new SStructure("DrawGraphicArrayType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Data", new SArray(new SInteger(STypeSize.U8)));
        locStruct.addField("Variables", new SArray(new SInteger(STypeSize.S32)));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawGraphicArrayType", locStruct);
        locStruct = new SStructure("DrawPolygonType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawPolygonType", locStruct);
        locStruct = new SStructure("DrawEllipseType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("SizeX", new SInteger(STypeSize.U8));
        locStruct.addField("SizeY", new SInteger(STypeSize.U8));
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawEllipseType", locStruct);
        locStruct = new SStructure("DrawFontType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Filename", new SString());
        locStruct.addField("Text", new SString());
        locStruct.addField("Options", new SInteger(STypeSize.U32));
        structures.put("DrawFontType", locStruct);
        locStruct = new SStructure("Tone");
        locStruct.addField("Frequency", new SInteger(STypeSize.U16));
        locStruct.addField("Duration", new SInteger(STypeSize.U16));
        structures.put("Tone", locStruct);
        locStruct = new SStructure("SoundPlayFileType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Filename", new SString());
        locStruct.addField("Loop", new SInteger(STypeSize.U8));
        locStruct.addField("SoundLevel", new SInteger(STypeSize.U8));
        structures.put("SoundPlayFileType", locStruct);
        locStruct = new SStructure("SoundPlayToneType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Frequency", new SInteger(STypeSize.U16));
        locStruct.addField("Duration", new SInteger(STypeSize.U16));
        locStruct.addField("Loop", new SInteger(STypeSize.U8));
        locStruct.addField("SoundLevel", new SInteger(STypeSize.U8));
        structures.put("SoundPlayToneType", locStruct);
        locStruct = new SStructure("SoundGetStateType");
        locStruct.addField("State", new SInteger(STypeSize.U8));
        locStruct.addField("Flags", new SInteger(STypeSize.U8));
        structures.put("SoundGetStateType", locStruct);
        locStruct = new SStructure("SoundSetStateType");
        locStruct.addField("Result", new SInteger(STypeSize.U8));
        locStruct.addField("State", new SInteger(STypeSize.U8));
        locStruct.addField("Flags", new SInteger(STypeSize.U8));
        structures.put("SoundSetStateType", locStruct);
        locStruct = new SStructure("CommLSWriteType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Port", new SInteger(STypeSize.U8));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        locStruct.addField("ReturnLen", new SInteger(STypeSize.U8));
        structures.put("CommLSWriteType", locStruct);
        locStruct = new SStructure("CommLSReadType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Port", new SInteger(STypeSize.U8));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        locStruct.addField("BufferLen", new SInteger(STypeSize.U8));
        structures.put("CommLSReadType", locStruct);
        locStruct = new SStructure("CommLSCheckStatusType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Port", new SInteger(STypeSize.U8));
        locStruct.addField("BytesReady", new SInteger(STypeSize.U8));
        structures.put("CommLSCheckStatusType", locStruct);
        locStruct = new SStructure("CommLSWriteExType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Port", new SInteger(STypeSize.U8));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        locStruct.addField("ReturnLen", new SInteger(STypeSize.U8));
        locStruct.addField("NoRestartOnRead", new SInteger(STypeSize.U8));
        structures.put("CommLSWriteExType", locStruct);
        locStruct = new SStructure("GetStartTickType");
        locStruct.addField("Result", new SInteger(STypeSize.U32));
        structures.put("GetStartTickType", locStruct);
        locStruct = new SStructure("KeepAliveType");
        locStruct.addField("Result", new SInteger(STypeSize.U32));
        structures.put("KeepAliveType", locStruct);
        locStruct = new SStructure("IOMapReadType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("ModuleName", new SString());
        locStruct.addField("Offset", new SInteger(STypeSize.U16));
        locStruct.addField("Count", new SInteger(STypeSize.U16));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        structures.put("IOMapReadType", locStruct);
        locStruct = new SStructure("IOMapWriteType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("ModuleName", new SString());
        locStruct.addField("Offset", new SInteger(STypeSize.U16));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        structures.put("IOMapWriteType", locStruct);
        locStruct = new SStructure("IOMapReadByIDType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("ModuleID", new SInteger(STypeSize.U32));
        locStruct.addField("Offset", new SInteger(STypeSize.U16));
        locStruct.addField("Count", new SInteger(STypeSize.U16));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        structures.put("IOMapReadByIDType", locStruct);
        locStruct = new SStructure("IOMapWriteByIDType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("ModuleID", new SInteger(STypeSize.U32));
        locStruct.addField("Offset", new SInteger(STypeSize.U16));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        structures.put("IOMapWriteByIDType", locStruct);
        locStruct = new SStructure("DatalogWriteType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Message", new SArray(new SInteger(STypeSize.U8)));
        structures.put("DatalogWriteType", locStruct);
        locStruct = new SStructure("DatalogGetTimesType");
        locStruct.addField("SyncTime", new SInteger(STypeSize.U32));
        locStruct.addField("SyncTick", new SInteger(STypeSize.U32));
        structures.put("DatalogGetTimesType", locStruct);
        locStruct = new SStructure("ReadSemDataType");
        locStruct.addField("SemData", new SInteger(STypeSize.U8));
        locStruct.addField("Request", new SInteger(STypeSize.U8));
        structures.put("ReadSemDataType", locStruct);
        locStruct = new SStructure("WriteSemDataType");
        locStruct.addField("SemData", new SInteger(STypeSize.U8));
        locStruct.addField("Request", new SInteger(STypeSize.U8));
        locStruct.addField("NewVal", new SInteger(STypeSize.U8));
        locStruct.addField("ClearBits", new SInteger(STypeSize.U8));
        structures.put("WriteSemDataType", locStruct);
        locStruct = new SStructure("UpdateCalibCacheInfoType");
        locStruct.addField("Result", new SInteger(STypeSize.U8));
        locStruct.addField("Name", new SString());
        locStruct.addField("MinVal", new SInteger(STypeSize.U16));
        locStruct.addField("MaxVal", new SInteger(STypeSize.U16));
        structures.put("UpdateCalibCacheInfoType", locStruct);
        locStruct = new SStructure("ComputeCalibValueType");
        locStruct.addField("Result", new SInteger(STypeSize.U8));
        locStruct.addField("Name", new SString());
        locStruct.addField("RawVal", new SInteger(STypeSize.U16));
        structures.put("ComputeCalibValueType", locStruct);
        locStruct = new SStructure("MessageWriteType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("QueueID", new SInteger(STypeSize.U8));
        locStruct.addField("Message", new SString());
        structures.put("MessageWriteType", locStruct);
        locStruct = new SStructure("MessageReadType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("QueueID", new SInteger(STypeSize.U8));
        locStruct.addField("Remove", new SInteger(STypeSize.U8));
        locStruct.addField("Message", new SString());
        structures.put("MessageReadType", locStruct);
        locStruct = new SStructure("CommBTCheckStatusType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Connection", new SInteger(STypeSize.U8));
        structures.put("CommBTCheckStatusType", locStruct);
        locStruct = new SStructure("CommBTWriteType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Connection", new SInteger(STypeSize.U8));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        structures.put("CommBTWriteType", locStruct);
        locStruct = new SStructure("CommExecuteFunctionType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("Cmd", new SInteger(STypeSize.U8));
        locStruct.addField("Param1", new SInteger(STypeSize.U8));
        locStruct.addField("Param2", new SInteger(STypeSize.U8));
        locStruct.addField("Param3", new SInteger(STypeSize.U8));
        locStruct.addField("Name", new SString());
        locStruct.addField("RetVal", new SInteger(STypeSize.U16));
        structures.put("CommExecuteFunctionType", locStruct);
        locStruct = new SStructure("CommHSControlType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Command", new SInteger(STypeSize.U8));
        locStruct.addField("BaudRate", new SInteger(STypeSize.U8));
        locStruct.addField("Mode", new SInteger(STypeSize.U16));
        structures.put("CommHSControlType", locStruct);
        locStruct = new SStructure("CommHSCheckStatusType");
        locStruct.addField("SendingData", new SInteger(STypeSize.U8));
        locStruct.addField("DataAvailable", new SInteger(STypeSize.U8));
        structures.put("CommHSCheckStatusType", locStruct);
        locStruct = new SStructure("CommHSReadWriteType");
        locStruct.addField("Status", new SInteger(STypeSize.S8));
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        structures.put("CommHSReadWriteType", locStruct);
        locStruct = new SStructure("CommBTOnOffType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("PowerState", new SInteger(STypeSize.U8));
        structures.put("CommBTOnOffType", locStruct);
        locStruct = new SStructure("CommBTConnectionType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("Action", new SInteger(STypeSize.U8));
        locStruct.addField("Name", new SString());
        locStruct.addField("ConnectionSlot", new SInteger(STypeSize.U8));
        structures.put("CommBTConnectionType", locStruct);
        locStruct = new SStructure("ReadButtonType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Index", new SInteger(STypeSize.U8));
        locStruct.addField("Pressed", new SInteger(STypeSize.U8));
        locStruct.addField("Count", new SInteger(STypeSize.U8));
        locStruct.addField("Reset", new SInteger(STypeSize.U8));
        structures.put("ReadButtonType", locStruct);
        locStruct = new SStructure("SetSleepTimeoutType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("TheSleepTimeoutMS", new SInteger(STypeSize.U32));
        structures.put("SetSleepTimeoutType", locStruct);
        locStruct = new SStructure("FileOpenType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        locStruct.addField("Filename", new SString());
        locStruct.addField("Length", new SInteger(STypeSize.U32));
        structures.put("FileOpenType", locStruct);
        locStruct = new SStructure("FileReadWriteType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        locStruct.addField("Buffer", new SString());
        locStruct.addField("Length", new SInteger(STypeSize.U32));
        structures.put("FileReadWriteType", locStruct);
        locStruct = new SStructure("FileCloseType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        structures.put("FileCloseType", locStruct);
        locStruct = new SStructure("FileResolveHandleType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        locStruct.addField("WriteHandle", new SInteger(STypeSize.U8));
        locStruct.addField("Filename", new SString());
        structures.put("FileResolveHandleType", locStruct);
        locStruct = new SStructure("FileRenameType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("OldFilename", new SString());
        locStruct.addField("NewFilename", new SString());
        structures.put("FileRenameType", locStruct);
        locStruct = new SStructure("FileDeleteType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("Filename", new SString());
        structures.put("FileDeleteType", locStruct);
        locStruct = new SStructure("LoaderExecuteFunctionType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("Cmd", new SInteger(STypeSize.U8));
        locStruct.addField("Filename", new SString());
        locStruct.addField("Buffer", new SArray(new SInteger(STypeSize.U8)));
        locStruct.addField("Length", new SInteger(STypeSize.U32));
        structures.put("LoaderExecuteFunctionType", locStruct);
        locStruct = new SStructure("FileFindType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        locStruct.addField("Filename", new SString());
        locStruct.addField("Length", new SInteger(STypeSize.U32));
        structures.put("FileFindType", locStruct);
        locStruct = new SStructure("FileSeekType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        locStruct.addField("Origin", new SInteger(STypeSize.U8));
        locStruct.addField("Length", new SInteger(STypeSize.S32));
        structures.put("FileSeekType", locStruct);
        locStruct = new SStructure("FileResizeType");
        locStruct.addField("Result", new SInteger(STypeSize.U16));
        locStruct.addField("FileHandle", new SInteger(STypeSize.U8));
        locStruct.addField("NewSize", new SInteger(STypeSize.U16));
        structures.put("FileResizeType", locStruct);
        locStruct = new SStructure("ListFilesType");
        locStruct.addField("Result", new SInteger(STypeSize.S8));
        locStruct.addField("Pattern", new SString());
        locStruct.addField("FileList", new SArray(new SString()));
        structures.put("ListFilesType", locStruct);
        locStruct = new SStructure("RandomNumberType");
        locStruct.addField("Result", new SInteger(STypeSize.S16));
        structures.put("RandomNumberType", locStruct);
        locStruct = new SStructure("div_t");
        locStruct.addField("quot", new SInteger(STypeSize.S16));
        locStruct.addField("rem", new SInteger(STypeSize.S16));
        structures.put("div_t", locStruct);
        locStruct = new SStructure("ldiv_t");
        locStruct.addField("quot", new SInteger(STypeSize.S32));
        locStruct.addField("rem", new SInteger(STypeSize.S32));
        structures.put("ldiv_t", locStruct);

        constants.put("TRUE", "1");
        constants.put("FALSE", "0");
        constants.put("NA", "0xFFFF");
        constants.put("OPARR_SUM", "0x00");
        constants.put("OPARR_MEAN", "0x01");
        constants.put("OPARR_SUMSQR", "0x02");
        constants.put("OPARR_STD", "0x03");
        constants.put("OPARR_MIN", "0x04");
        constants.put("OPARR_MAX", "0x05");
        constants.put("OPARR_SORT", "0x06");
        constants.put("PI", "3.141593");
        constants.put("RADIANS_PER_DEGREE", "3.141593/180");
        constants.put("DEGREES_PER_RADIAN", "180/3.141593");
        constants.put("FileOpenRead", "0");
        constants.put("FileOpenWrite", "1");
        constants.put("FileOpenAppend", "2");
        constants.put("FileRead", "3");
        constants.put("FileWrite", "4");
        constants.put("FileClose", "5");
        constants.put("FileResolveHandle", "6");
        constants.put("FileRename", "7");
        constants.put("FileDelete", "8");
        constants.put("SoundPlayFile", "9");
        constants.put("SoundPlayTone", "10");
        constants.put("SoundGetState", "11");
        constants.put("SoundSetState", "12");
        constants.put("DrawText", "13");
        constants.put("DrawPoint", "14");
        constants.put("DrawLine", "15");
        constants.put("DrawCircle", "16");
        constants.put("DrawRect", "17");
        constants.put("DrawGraphic", "18");
        constants.put("SetScreenMode", "19");
        constants.put("ReadButton", "20");
        constants.put("CommLSWrite", "21");
        constants.put("CommLSRead", "22");
        constants.put("CommLSCheckStatus", "23");
        constants.put("RandomNumber", "24");
        constants.put("GetStartTick", "25");
        constants.put("MessageWrite", "26");
        constants.put("MessageRead", "27");
        constants.put("CommBTCheckStatus", "28");
        constants.put("CommBTWrite", "29");
        constants.put("CommBTRead", "30");
        constants.put("KeepAlive", "31");
        constants.put("IOMapRead", "32");
        constants.put("IOMapWrite", "33");
        constants.put("ColorSensorRead", "34");
        constants.put("CommBTOnOff", "35");
        constants.put("CommBTConnection", "36");
        constants.put("CommHSWrite", "37");
        constants.put("CommHSRead", "38");
        constants.put("CommHSCheckStatus", "39");
        constants.put("ReadSemData", "40");
        constants.put("WriteSemData", "41");
        constants.put("ComputeCalibValue", "42");
        constants.put("UpdateCalibCacheInfo", "43");
        constants.put("DatalogWrite", "44");
        constants.put("DatalogGetTimes", "45");
        constants.put("SetSleepTimeoutVal", "46");
        constants.put("ListFiles", "47");
        constants.put("IOMapReadByID", "78");
        constants.put("IOMapWriteByID", "79");
        constants.put("DisplayExecuteFunction", "80");
        constants.put("CommExecuteFunction", "81");
        constants.put("LoaderExecuteFunction", "82");
        constants.put("FileFindFirst", "83");
        constants.put("FileFindNext", "84");
        constants.put("FileOpenWriteLinear", "85");
        constants.put("FileOpenWriteNonLinear", "86");
        constants.put("FileOpenReadLinear", "87");
        constants.put("CommHSControl", "88");
        constants.put("CommLSWriteEx", "89");
        constants.put("FileSeek", "90");
        constants.put("FileResize", "91");
        constants.put("DrawGraphicArray", "92");
        constants.put("DrawPolygon", "93");
        constants.put("DrawEllipse", "94");
        constants.put("DrawFont", "95");
        constants.put("LCD_LINE8", "0");
        constants.put("LCD_LINE7", "8");
        constants.put("LCD_LINE6", "16");
        constants.put("LCD_LINE5", "24");
        constants.put("LCD_LINE4", "32");
        constants.put("LCD_LINE3", "40");
        constants.put("LCD_LINE2", "48");
        constants.put("LCD_LINE1", "56");
        constants.put("MS_1", "1");
        constants.put("MS_2", "2");
        constants.put("MS_3", "3");
        constants.put("MS_4", "4");
        constants.put("MS_5", "5");
        constants.put("MS_6", "6");
        constants.put("MS_7", "7");
        constants.put("MS_8", "8");
        constants.put("MS_9", "9");
        constants.put("MS_10", "10");
        constants.put("MS_20", "20");
        constants.put("MS_30", "30");
        constants.put("MS_40", "40");
        constants.put("MS_50", "50");
        constants.put("MS_60", "60");
        constants.put("MS_70", "70");
        constants.put("MS_80", "80");
        constants.put("MS_90", "90");
        constants.put("MS_100", "100");
        constants.put("MS_150", "150");
        constants.put("MS_200", "200");
        constants.put("MS_250", "250");
        constants.put("MS_300", "300");
        constants.put("MS_350", "350");
        constants.put("MS_400", "400");
        constants.put("MS_450", "450");
        constants.put("MS_500", "500");
        constants.put("MS_600", "600");
        constants.put("MS_700", "700");
        constants.put("MS_800", "800");
        constants.put("MS_900", "900");
        constants.put("SEC_1", "1000");
        constants.put("SEC_2", "2000");
        constants.put("SEC_3", "3000");
        constants.put("SEC_4", "4000");
        constants.put("SEC_5", "5000");
        constants.put("SEC_6", "6000");
        constants.put("SEC_7", "7000");
        constants.put("SEC_8", "8000");
        constants.put("SEC_9", "9000");
        constants.put("SEC_10", "10000");
        constants.put("SEC_15", "15000");
        constants.put("SEC_20", "20000");
        constants.put("SEC_30", "30000");
        constants.put("MIN_1", "60000");
        constants.put("MAILBOX1", "0");
        constants.put("MAILBOX2", "1");
        constants.put("MAILBOX3", "2");
        constants.put("MAILBOX4", "3");
        constants.put("MAILBOX5", "4");
        constants.put("MAILBOX6", "5");
        constants.put("MAILBOX7", "6");
        constants.put("MAILBOX8", "7");
        constants.put("MAILBOX9", "8");
        constants.put("MAILBOX10", "9");
        constants.put("CommandModuleName", "\"Command.mod\"");
        constants.put("IOCtrlModuleName", "\"IOCtrl.mod\"");
        constants.put("LoaderModuleName", "\"Loader.mod\"");
        constants.put("SoundModuleName", "\"Sound.mod\"");
        constants.put("ButtonModuleName", "\"Button.mod\"");
        constants.put("UIModuleName", "\"Ui.mod\"");
        constants.put("InputModuleName", "\"Input.mod\"");
        constants.put("OutputModuleName", "\"Output.mod\"");
        constants.put("LowSpeedModuleName", "\"Low Speed.mod\"");
        constants.put("DisplayModuleName", "\"Display.mod\"");
        constants.put("CommModuleName", "\"Comm.mod\"");
        constants.put("CommandModuleID", "0x00010001");
        constants.put("IOCtrlModuleID", "0x00060001");
        constants.put("LoaderModuleID", "0x00090001");
        constants.put("SoundModuleID", "0x00080001");
        constants.put("ButtonModuleID", "0x00040001");
        constants.put("UIModuleID", "0x000C0001");
        constants.put("InputModuleID", "0x00030001");
        constants.put("OutputModuleID", "0x00020001");
        constants.put("LowSpeedModuleID", "0x000B0001");
        constants.put("DisplayModuleID", "0x000A0001");
        constants.put("CommModuleID", "0x00050001");
        constants.put("STAT_MSG_EMPTY_MAILBOX", "64");
        constants.put("STAT_COMM_PENDING", "32");
        constants.put("TIMES_UP", "6");
        constants.put("ROTATE_QUEUE", "5");
        constants.put("STOP_REQ", "4");
        constants.put("BREAKOUT_REQ", "3");
        constants.put("CLUMP_SUSPEND", "2");
        constants.put("CLUMP_DONE", "1");
        constants.put("NO_ERR", "0");
        constants.put("ERR_ARG", "-1");
        constants.put("ERR_INSTR", "-2");
        constants.put("ERR_FILE", "-3");
        constants.put("ERR_VER", "-4");
        constants.put("ERR_MEM", "-5");
        constants.put("ERR_BAD_PTR", "-6");
        constants.put("ERR_CLUMP_COUNT", "-7");
        constants.put("ERR_NO_CODE", "-8");
        constants.put("ERR_INSANE_OFFSET", "-9");
        constants.put("ERR_BAD_POOL_SIZE", "-10");
        constants.put("ERR_LOADER_ERR", "-11");
        constants.put("ERR_SPOTCHECK_FAIL", "-12");
        constants.put("ERR_NO_ACTIVE_CLUMP", "-13");
        constants.put("ERR_DEFAULT_OFFSETS", "-14");
        constants.put("ERR_MEMMGR_FAIL", "-15");
        constants.put("ERR_NON_FATAL", "-16");
        constants.put("ERR_INVALID_PORT", "-16");
        constants.put("ERR_INVALID_FIELD", "-17");
        constants.put("ERR_INVALID_QUEUE", "-18");
        constants.put("ERR_INVALID_SIZE", "-19");
        constants.put("ERR_NO_PROG", "-20");
        constants.put("ERR_COMM_CHAN_NOT_READY", "-32");
        constants.put("ERR_COMM_CHAN_INVALID", "-33");
        constants.put("ERR_COMM_BUFFER_FULL", "-34");
        constants.put("ERR_COMM_BUS_ERR", "-35");
        constants.put("ERR_RC_ILLEGAL_VAL", "-64");
        constants.put("ERR_RC_BAD_PACKET", "-65");
        constants.put("ERR_RC_UNKNOWN_CMD", "-66");
        constants.put("ERR_RC_FAILED", "-67");
        constants.put("PROG_IDLE", "0");
        constants.put("PROG_OK", "1");
        constants.put("PROG_RUNNING", "2");
        constants.put("PROG_ERROR", "3");
        constants.put("PROG_ABORT", "4");
        constants.put("PROG_RESET", "5");
        constants.put("CommandOffsetFormatString", "0");
        constants.put("CommandOffsetPRCHandler", "16");
        constants.put("CommandOffsetTick", "20");
        constants.put("CommandOffsetOffsetDS", "24");
        constants.put("CommandOffsetOffsetDVA", "26");
        constants.put("CommandOffsetProgStatus", "28");
        constants.put("CommandOffsetAwake", "29");
        constants.put("CommandOffsetActivateFlag", "30");
        constants.put("CommandOffsetDeactivateFlag", "31");
        constants.put("CommandOffsetFileName", "32");
        constants.put("CommandOffsetMemoryPool", "52");
        constants.put("CommandOffsetSyncTime", "32820");
        constants.put("CommandOffsetSyncTick", "32824");
        constants.put("IOCTRL_POWERDOWN", "0x5A00");
        constants.put("IOCTRL_BOOT", "0xA55A");
        constants.put("IOCtrlOffsetPowerOn", "0");
        constants.put("LoaderOffsetPFunc", "0");
        constants.put("LoaderOffsetFreeUserFlash", "4");
        constants.put("EOF", "-1");
        constants.put("NULL", "0");
        constants.put("LDR_SUCCESS", "0x0000");
        constants.put("LDR_INPROGRESS", "0x0001");
        constants.put("LDR_REQPIN", "0x0002");
        constants.put("LDR_NOMOREHANDLES", "0x8100");
        constants.put("LDR_NOSPACE", "0x8200");
        constants.put("LDR_NOMOREFILES", "0x8300");
        constants.put("LDR_EOFEXPECTED", "0x8400");
        constants.put("LDR_ENDOFFILE", "0x8500");
        constants.put("LDR_NOTLINEARFILE", "0x8600");
        constants.put("LDR_FILENOTFOUND", "0x8700");
        constants.put("LDR_HANDLEALREADYCLOSED", "0x8800");
        constants.put("LDR_NOLINEARSPACE", "0x8900");
        constants.put("LDR_UNDEFINEDERROR", "0x8A00");
        constants.put("LDR_FILEISBUSY", "0x8B00");
        constants.put("LDR_NOWRITEBUFFERS", "0x8C00");
        constants.put("LDR_APPENDNOTPOSSIBLE", "0x8D00");
        constants.put("LDR_FILEISFULL", "0x8E00");
        constants.put("LDR_FILEEXISTS", "0x8F00");
        constants.put("LDR_MODULENOTFOUND", "0x9000");
        constants.put("LDR_OUTOFBOUNDARY", "0x9100");
        constants.put("LDR_ILLEGALFILENAME", "0x9200");
        constants.put("LDR_ILLEGALHANDLE", "0x9300");
        constants.put("LDR_BTBUSY", "0x9400");
        constants.put("LDR_BTCONNECTFAIL", "0x9500");
        constants.put("LDR_BTTIMEOUT", "0x9600");
        constants.put("LDR_FILETX_TIMEOUT", "0x9700");
        constants.put("LDR_FILETX_DSTEXISTS", "0x9800");
        constants.put("LDR_FILETX_SRCMISSING", "0x9900");
        constants.put("LDR_FILETX_STREAMERROR", "0x9A00");
        constants.put("LDR_FILETX_CLOSEERROR", "0x9B00");
        constants.put("LDR_INVALIDSEEK", "0x9C00");
        constants.put("LDR_CMD_OPENREAD", "0x80");
        constants.put("LDR_CMD_OPENWRITE", "0x81");
        constants.put("LDR_CMD_READ", "0x82");
        constants.put("LDR_CMD_WRITE", "0x83");
        constants.put("LDR_CMD_CLOSE", "0x84");
        constants.put("LDR_CMD_DELETE", "0x85");
        constants.put("LDR_CMD_FINDFIRST", "0x86");
        constants.put("LDR_CMD_FINDNEXT", "0x87");
        constants.put("LDR_CMD_VERSIONS", "0x88");
        constants.put("LDR_CMD_OPENWRITELINEAR", "0x89");
        constants.put("LDR_CMD_OPENREADLINEAR", "0x8A");
        constants.put("LDR_CMD_OPENWRITEDATA", "0x8B");
        constants.put("LDR_CMD_OPENAPPENDDATA", "0x8C");
        constants.put("LDR_CMD_CROPDATAFILE", "0x8D");
        constants.put("LDR_CMD_FINDFIRSTMODULE", "0x90");
        constants.put("LDR_CMD_FINDNEXTMODULE", "0x91");
        constants.put("LDR_CMD_CLOSEMODHANDLE", "0x92");
        constants.put("LDR_CMD_IOMAPREAD", "0x94");
        constants.put("LDR_CMD_IOMAPWRITE", "0x95");
        constants.put("LDR_CMD_BOOTCMD", "0x97");
        constants.put("LDR_CMD_SETBRICKNAME", "0x98");
        constants.put("LDR_CMD_BTGETADR", "0x9A");
        constants.put("LDR_CMD_DEVICEINFO", "0x9B");
        constants.put("LDR_CMD_DELETEUSERFLASH", "0xA0");
        constants.put("LDR_CMD_POLLCMDLEN", "0xA1");
        constants.put("LDR_CMD_POLLCMD", "0xA2");
        constants.put("LDR_CMD_RENAMEFILE", "0xA3");
        constants.put("LDR_CMD_BTFACTORYRESET", "0xA4");
        constants.put("LDR_CMD_RESIZEDATAFILE", "0xD0");
        constants.put("LDR_CMD_SEEKFROMSTART", "0xD1");
        constants.put("LDR_CMD_SEEKFROMCURRENT", "0xD2");
        constants.put("LDR_CMD_SEEKFROMEND", "0xD3");
        constants.put("SOUND_FLAGS_IDLE", "0x00");
        constants.put("SOUND_FLAGS_UPDATE", "0x01");
        constants.put("SOUND_FLAGS_RUNNING", "0x02");
        constants.put("SOUND_STATE_IDLE", "0x00");
        constants.put("SOUND_STATE_FILE", "0x02");
        constants.put("SOUND_STATE_TONE", "0x03");
        constants.put("SOUND_STATE_STOP", "0x04");
        constants.put("SOUND_MODE_ONCE", "0x00");
        constants.put("SOUND_MODE_LOOP", "0x01");
        constants.put("SOUND_MODE_TONE", "0x02");
        constants.put("SoundOffsetFreq", "0");
        constants.put("SoundOffsetDuration", "2");
        constants.put("SoundOffsetSampleRate", "4");
        constants.put("SoundOffsetSoundFilename", "6");
        constants.put("SoundOffsetFlags", "26");
        constants.put("SoundOffsetState", "27");
        constants.put("SoundOffsetMode", "28");
        constants.put("SoundOffsetVolume", "29");
        constants.put("FREQUENCY_MIN", "220");
        constants.put("FREQUENCY_MAX", "14080");
        constants.put("SAMPLERATE_MIN", "2000");
        constants.put("SAMPLERATE_DEFAULT", "8000");
        constants.put("SAMPLERATE_MAX", "16000");
        constants.put("TONE_A3", "220");
        constants.put("TONE_AS3", "233");
        constants.put("TONE_B3", "247");
        constants.put("TONE_C4", "262");
        constants.put("TONE_CS4", "277");
        constants.put("TONE_D4", "294");
        constants.put("TONE_DS4", "311");
        constants.put("TONE_E4", "330");
        constants.put("TONE_F4", "349");
        constants.put("TONE_FS4", "370");
        constants.put("TONE_G4", "392");
        constants.put("TONE_GS4", "415");
        constants.put("TONE_A4", "440");
        constants.put("TONE_AS4", "466");
        constants.put("TONE_B4", "494");
        constants.put("TONE_C5", "523");
        constants.put("TONE_CS5", "554");
        constants.put("TONE_D5", "587");
        constants.put("TONE_DS5", "622");
        constants.put("TONE_E5", "659");
        constants.put("TONE_F5", "698");
        constants.put("TONE_FS5", "740");
        constants.put("TONE_G5", "784");
        constants.put("TONE_GS5", "831");
        constants.put("TONE_A5", "880");
        constants.put("TONE_AS5", "932");
        constants.put("TONE_B5", "988");
        constants.put("TONE_C6", "1047");
        constants.put("TONE_CS6", "1109");
        constants.put("TONE_D6", "1175");
        constants.put("TONE_DS6", "1245");
        constants.put("TONE_E6", "1319");
        constants.put("TONE_F6", "1397");
        constants.put("TONE_FS6", "1480");
        constants.put("TONE_G6", "1568");
        constants.put("TONE_GS6", "1661");
        constants.put("TONE_A6", "1760");
        constants.put("TONE_AS6", "1865");
        constants.put("TONE_B6", "1976");
        constants.put("TONE_C7", "2093");
        constants.put("TONE_CS7", "2217");
        constants.put("TONE_D7", "2349");
        constants.put("TONE_DS7", "2489");
        constants.put("TONE_E7", "2637");
        constants.put("TONE_F7", "2794");
        constants.put("TONE_FS7", "2960");
        constants.put("TONE_G7", "3136");
        constants.put("TONE_GS7", "3322");
        constants.put("TONE_A7", "3520");
        constants.put("TONE_AS7", "3729");
        constants.put("TONE_B7", "3951");
        constants.put("BTN1", "0");
        constants.put("BTN2", "1");
        constants.put("BTN3", "2");
        constants.put("BTN4", "3");
        constants.put("BTNEXIT", "0");
        constants.put("BTNRIGHT", "1");
        constants.put("BTNLEFT", "2");
        constants.put("BTNCENTER", "3");
        constants.put("NO_OF_BTNS", "4");
        constants.put("BTNSTATE_PRESSED_EV", "0x01");
        constants.put("BTNSTATE_SHORT_RELEASED_EV", "0x02");
        constants.put("BTNSTATE_LONG_PRESSED_EV", "0x04");
        constants.put("BTNSTATE_LONG_RELEASED_EV", "0x08");
        constants.put("BTNSTATE_PRESSED_STATE", "0x80");
        constants.put("BTNSTATE_NONE", "0x10");
        constants.put("UI_FLAGS_UPDATE", "0x01");
        constants.put("UI_FLAGS_DISABLE_LEFT_RIGHT_ENTER", "0x02");
        constants.put("UI_FLAGS_DISABLE_EXIT", "0x04");
        constants.put("UI_FLAGS_REDRAW_STATUS", "0x08");
        constants.put("UI_FLAGS_RESET_SLEEP_TIMER", "0x10");
        constants.put("UI_FLAGS_EXECUTE_LMS_FILE", "0x20");
        constants.put("UI_FLAGS_BUSY", "0x40");
        constants.put("UI_FLAGS_ENABLE_STATUS_UPDATE", "0x80");
        constants.put("UI_STATE_INIT_DISPLAY", "0");
        constants.put("UI_STATE_INIT_LOW_BATTERY", "1");
        constants.put("UI_STATE_INIT_INTRO", "2");
        constants.put("UI_STATE_INIT_WAIT", "3");
        constants.put("UI_STATE_INIT_MENU", "4");
        constants.put("UI_STATE_NEXT_MENU", "5");
        constants.put("UI_STATE_DRAW_MENU", "6");
        constants.put("UI_STATE_TEST_BUTTONS", "7");
        constants.put("UI_STATE_LEFT_PRESSED", "8");
        constants.put("UI_STATE_RIGHT_PRESSED", "9");
        constants.put("UI_STATE_ENTER_PRESSED", "10");
        constants.put("UI_STATE_EXIT_PRESSED", "11");
        constants.put("UI_STATE_CONNECT_REQUEST", "12");
        constants.put("UI_STATE_EXECUTE_FILE", "13");
        constants.put("UI_STATE_EXECUTING_FILE", "14");
        constants.put("UI_STATE_LOW_BATTERY", "15");
        constants.put("UI_STATE_BT_ERROR", "16");
        constants.put("UI_BUTTON_NONE", "0");
        constants.put("UI_BUTTON_LEFT", "1");
        constants.put("UI_BUTTON_ENTER", "2");
        constants.put("UI_BUTTON_RIGHT", "3");
        constants.put("UI_BUTTON_EXIT", "4");
        constants.put("UI_BT_STATE_VISIBLE", "0x01");
        constants.put("UI_BT_STATE_CONNECTED", "0x02");
        constants.put("UI_BT_STATE_OFF", "0x04");
        constants.put("UI_BT_ERROR_ATTENTION", "0x08");
        constants.put("UI_BT_CONNECT_REQUEST", "0x40");
        constants.put("UI_BT_PIN_REQUEST", "0x80");
        constants.put("UI_VM_IDLE", "0");
        constants.put("UI_VM_RUN_FREE", "1");
        constants.put("UI_VM_RUN_SINGLE", "2");
        constants.put("UI_VM_RUN_PAUSE", "3");
        constants.put("UI_VM_RESET1", "4");
        constants.put("UI_VM_RESET2", "5");
        constants.put("UIOffsetPMenu", "0");
        constants.put("UIOffsetBatteryVoltage", "4");
        constants.put("UIOffsetLMSfilename", "6");
        constants.put("UIOffsetFlags", "26");
        constants.put("UIOffsetState", "27");
        constants.put("UIOffsetButton", "28");
        constants.put("UIOffsetRunState", "29");
        constants.put("UIOffsetBatteryState", "30");
        constants.put("UIOffsetBluetoothState", "31");
        constants.put("UIOffsetUsbState", "32");
        constants.put("UIOffsetSleepTimeout", "33");
        constants.put("UIOffsetSleepTimer", "34");
        constants.put("UIOffsetRechargeable", "35");
        constants.put("UIOffsetVolume", "36");
        constants.put("UIOffsetError", "37");
        constants.put("UIOffsetOBPPointer", "38");
        constants.put("UIOffsetForceOff", "39");
        constants.put("UIOffsetAbortFlag", "40");
        constants.put("IN_1", "0x00");
        constants.put("IN_2", "0x01");
        constants.put("IN_3", "0x02");
        constants.put("IN_4", "0x03");
        constants.put("IN_TYPE_NO_SENSOR", "0x00");
        constants.put("IN_TYPE_SWITCH", "0x01");
        constants.put("IN_TYPE_TEMPERATURE", "0x02");
        constants.put("IN_TYPE_REFLECTION", "0x03");
        constants.put("IN_TYPE_ANGLE", "0x04");
        constants.put("IN_TYPE_LIGHT_ACTIVE", "0x05");
        constants.put("IN_TYPE_LIGHT_INACTIVE", "0x06");
        constants.put("IN_TYPE_SOUND_DB", "0x07");
        constants.put("IN_TYPE_SOUND_DBA", "0x08");
        constants.put("IN_TYPE_CUSTOM", "0x09");
        constants.put("IN_TYPE_LOWSPEED", "0x0A");
        constants.put("IN_TYPE_LOWSPEED_9V", "0x0B");
        constants.put("IN_TYPE_HISPEED", "0x0C");
        constants.put("IN_TYPE_COLORFULL", "0x0D");
        constants.put("IN_TYPE_COLORRED", "0x0E");
        constants.put("IN_TYPE_COLORGREEN", "0x0F");
        constants.put("IN_TYPE_COLORBLUE", "0x10");
        constants.put("IN_TYPE_COLORNONE", "0x11");
        constants.put("IN_TYPE_COLOREXIT", "0x12");
        constants.put("IN_MODE_RAW", "0x00");
        constants.put("IN_MODE_BOOLEAN", "0x20");
        constants.put("IN_MODE_TRANSITIONCNT", "0x40");
        constants.put("IN_MODE_PERIODCOUNTER", "0x60");
        constants.put("IN_MODE_PCTFULLSCALE", "0x80");
        constants.put("IN_MODE_CELSIUS", "0xA0");
        constants.put("IN_MODE_FAHRENHEIT", "0xC0");
        constants.put("IN_MODE_ANGLESTEP", "0xE0");
        constants.put("IN_MODE_SLOPEMASK", "0x1F");
        constants.put("IN_MODE_MODEMASK", "0xE0");
        constants.put("Type", "0");
        constants.put("InputMode", "1");
        constants.put("RawValue", "2");
        constants.put("NormalizedValue", "3");
        constants.put("ScaledValue", "4");
        constants.put("InvalidData", "5");
        constants.put("INPUT_DIGI0", "1");
        constants.put("INPUT_DIGI1", "2");
        constants.put("INPUT_CUSTOMINACTIVE", "0x00");
        constants.put("INPUT_CUSTOM9V", "0x01");
        constants.put("INPUT_CUSTOMACTIVE", "0x02");
        constants.put("INPUT_INVALID_DATA", "0x01");
        constants.put("INPUT_RED", "0");
        constants.put("INPUT_GREEN", "1");
        constants.put("INPUT_BLUE", "2");
        constants.put("INPUT_BLANK", "3");
        constants.put("INPUT_NO_OF_COLORS", "4");
        constants.put("INPUT_BLACKCOLOR", "1");
        constants.put("INPUT_BLUECOLOR", "2");
        constants.put("INPUT_GREENCOLOR", "3");
        constants.put("INPUT_YELLOWCOLOR", "4");
        constants.put("INPUT_REDCOLOR", "5");
        constants.put("INPUT_WHITECOLOR", "6");
        constants.put("INPUT_SENSORCAL", "0x01");
        constants.put("INPUT_SENSOROFF", "0x02");
        constants.put("INPUT_RUNNINGCAL", "0x20");
        constants.put("INPUT_STARTCAL", "0x40");
        constants.put("INPUT_RESETCAL", "0x80");
        constants.put("INPUT_CAL_POINT_0", "0");
        constants.put("INPUT_CAL_POINT_1", "1");
        constants.put("INPUT_CAL_POINT_2", "2");
        constants.put("INPUT_NO_OF_POINTS", "3");
        constants.put("OUT_A", "0x00");
        constants.put("OUT_B", "0x01");
        constants.put("OUT_C", "0x02");
        constants.put("OUT_AB", "0x03");
        constants.put("OUT_AC", "0x04");
        constants.put("OUT_BC", "0x05");
        constants.put("OUT_ABC", "0x06");
        constants.put("PID_0", "0");
        constants.put("PID_1", "32");
        constants.put("PID_2", "64");
        constants.put("PID_3", "96");
        constants.put("PID_4", "128");
        constants.put("PID_5", "160");
        constants.put("PID_6", "192");
        constants.put("PID_7", "224");
        constants.put("UF_UPDATE_MODE", "0x01");
        constants.put("UF_UPDATE_SPEED", "0x02");
        constants.put("UF_UPDATE_TACHO_LIMIT", "0x04");
        constants.put("UF_UPDATE_RESET_COUNT", "0x08");
        constants.put("UF_UPDATE_PID_VALUES", "0x10");
        constants.put("UF_UPDATE_RESET_BLOCK_COUNT", "0x20");
        constants.put("UF_UPDATE_RESET_ROTATION_COUNT", "0x40");
        constants.put("UF_PENDING_UPDATES", "0x80");
        constants.put("RESET_NONE", "0x00");
        constants.put("RESET_COUNT", "0x08");
        constants.put("RESET_BLOCK_COUNT", "0x20");
        constants.put("RESET_ROTATION_COUNT", "0x40");
        constants.put("RESET_BLOCKANDTACHO", "0x28");
        constants.put("RESET_ALL", "0x68");
        constants.put("OUT_MODE_COAST", "0x00");
        constants.put("OUT_MODE_MOTORON", "0x01");
        constants.put("OUT_MODE_BRAKE", "0x02");
        constants.put("OUT_MODE_REGULATED", "0x04");
        constants.put("OUT_MODE_REGMETHOD", "0xF0");
        constants.put("OUT_OPTION_HOLDATLIMIT", "0x10");
        constants.put("OUT_OPTION_RAMPDOWNTOLIMIT", "0x20");
        constants.put("OUT_RUNSTATE_IDLE", "0x00");
        constants.put("OUT_RUNSTATE_RAMPUP", "0x10");
        constants.put("OUT_RUNSTATE_RUNNING", "0x20");
        constants.put("OUT_RUNSTATE_RAMPDOWN", "0x40");
        constants.put("OUT_RUNSTATE_HOLD", "0x60");
        constants.put("OUT_REGMODE_IDLE", "0");
        constants.put("OUT_REGMODE_SPEED", "1");
        constants.put("OUT_REGMODE_SYNC", "2");
        constants.put("OutputOffsetPwnFreq", "96");
        constants.put("COM_CHANNEL_NONE_ACTIVE", "0x00");
        constants.put("COM_CHANNEL_ONE_ACTIVE", "0x01");
        constants.put("COM_CHANNEL_TWO_ACTIVE", "0x02");
        constants.put("COM_CHANNEL_THREE_ACTIVE", "0x04");
        constants.put("COM_CHANNEL_FOUR_ACTIVE", "0x08");
        constants.put("LOWSPEED_IDLE", "0");
        constants.put("LOWSPEED_INIT", "1");
        constants.put("LOWSPEED_LOAD_BUFFER", "2");
        constants.put("LOWSPEED_COMMUNICATING", "3");
        constants.put("LOWSPEED_ERROR", "4");
        constants.put("LOWSPEED_DONE", "5");
        constants.put("LOWSPEED_TRANSMITTING", "1");
        constants.put("LOWSPEED_RECEIVING", "2");
        constants.put("LOWSPEED_DATA_RECEIVED", "3");
        constants.put("LOWSPEED_NO_ERROR", "0");
        constants.put("LOWSPEED_CH_NOT_READY", "1");
        constants.put("LOWSPEED_TX_ERROR", "2");
        constants.put("LOWSPEED_RX_ERROR", "3");
        constants.put("LowSpeedOffsetState", "164");
        constants.put("LowSpeedOffsetSpeed", "165");
        constants.put("LowSpeedOffsetNoRestartOnRead", "166");
        constants.put("LSREAD_RESTART_ALL", "0x00");
        constants.put("LSREAD_NO_RESTART_1", "0x01");
        constants.put("LSREAD_NO_RESTART_2", "0x02");
        constants.put("LSREAD_NO_RESTART_3", "0x04");
        constants.put("LSREAD_NO_RESTART_4", "0x08");
        constants.put("LSREAD_RESTART_NONE", "0x0F");
        constants.put("LSREAD_NO_RESTART_MASK", "0x10");
        constants.put("I2C_REG_VERSION", "0x00");
        constants.put("I2C_REG_VENDOR_ID", "0x08");
        constants.put("I2C_REG_DEVICE_ID", "0x10");
        constants.put("I2C_REG_CMD", "0x41");
        constants.put("US_CMD_OFF", "0x00");
        constants.put("US_CMD_SINGLESHOT", "0x01");
        constants.put("US_CMD_CONTINUOUS", "0x02");
        constants.put("US_CMD_EVENTCAPTURE", "0x03");
        constants.put("US_CMD_WARMRESET", "0x04");
        constants.put("US_REG_CM_INTERVAL", "0x40");
        constants.put("US_REG_ACTUAL_ZERO", "0x50");
        constants.put("US_REG_SCALE_FACTOR", "0x51");
        constants.put("US_REG_SCALE_DIVISOR", "0x52");
        constants.put("US_REG_FACTORY_ACTUAL_ZERO", "0x11");
        constants.put("US_REG_FACTORY_SCALE_FACTOR", "0x12");
        constants.put("US_REG_FACTORY_SCALE_DIVISOR", "0x13");
        constants.put("US_REG_MEASUREMENT_UNITS", "0x14");
        constants.put("TEMP_RES_12BIT", "0x60");
        constants.put("TEMP_RES_11BIT", "0x40");
        constants.put("TEMP_RES_10BIT", "0x20");
        constants.put("TEMP_RES_9BIT", "0x00");
        constants.put("TEMP_SD_CONTINUOUS", "0x00");
        constants.put("TEMP_SD_SHUTDOWN", "0x01");
        constants.put("TEMP_TM_COMPARATOR", "0x00");
        constants.put("TEMP_TM_INTERRUPT", "0x02");
        constants.put("TEMP_OS_ONESHOT", "0x80");
        constants.put("TEMP_FQ_1", "0x00");
        constants.put("TEMP_FQ_2", "0x08");
        constants.put("TEMP_FQ_4", "0x10");
        constants.put("TEMP_FQ_6", "0x18");
        constants.put("TEMP_POL_LOW", "0x00");
        constants.put("TEMP_POL_HIGH", "0x04");
        constants.put("TEMP_I2C_ADDRESS", "0x98");
        constants.put("TEMP_REG_TEMP", "0x00");
        constants.put("TEMP_REG_CONFIG", "0x01");
        constants.put("TEMP_REG_TLOW", "0x02");
        constants.put("TEMP_REG_THIGH", "0x03");
        constants.put("DISPLAY_ERASE_ALL", "0x00");
        constants.put("DISPLAY_PIXEL", "0x01");
        constants.put("DISPLAY_HORIZONTAL_LINE", "0x02");
        constants.put("DISPLAY_VERTICAL_LINE", "0x03");
        constants.put("DISPLAY_CHAR", "0x04");
        constants.put("DISPLAY_ERASE_LINE", "0x05");
        constants.put("DISPLAY_FILL_REGION", "0x06");
        constants.put("DISPLAY_FRAME", "0x07");
        constants.put("DRAW_OPT_NORMAL", "(0x0000)");
        constants.put("DRAW_OPT_CLEAR_WHOLE_SCREEN", "(0x0001)");
        constants.put("DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN", "(0x0002)");
        constants.put("DRAW_OPT_CLEAR_PIXELS", "(0x0004)");
        constants.put("DRAW_OPT_CLEAR", "(0x0004)");
        constants.put("DRAW_OPT_INVERT", "(0x0004)");
        constants.put("DRAW_OPT_LOGICAL_COPY", "(0x0000)");
        constants.put("DRAW_OPT_LOGICAL_AND", "(0x0008)");
        constants.put("DRAW_OPT_LOGICAL_OR", "(0x0010)");
        constants.put("DRAW_OPT_LOGICAL_XOR", "(0x0018)");
        constants.put("DRAW_OPT_FILL_SHAPE", "(0x0020)");
        constants.put("DRAW_OPT_CLEAR_SCREEN_MODES", "(0x0003)");
        constants.put("DRAW_OPT_LOGICAL_OPERATIONS", "(0x0018)");
        constants.put("DRAW_OPT_POLYGON_POLYLINE", "(0x0400)");
        constants.put("DRAW_OPT_FONT_DIRECTIONS", "(0x01C0)");
        constants.put("DRAW_OPT_FONT_WRAP", "(0x0200)");
        constants.put("DRAW_OPT_FONT_DIR_L2RB", "(0x0000)");
        constants.put("DRAW_OPT_FONT_DIR_L2RT", "(0x0040)");
        constants.put("DRAW_OPT_FONT_DIR_R2LB", "(0x0080)");
        constants.put("DRAW_OPT_FONT_DIR_R2LT", "(0x00C0)");
        constants.put("DRAW_OPT_FONT_DIR_B2TL", "(0x0100)");
        constants.put("DRAW_OPT_FONT_DIR_B2TR", "(0x0140)");
        constants.put("DRAW_OPT_FONT_DIR_T2BL", "(0x0180)");
        constants.put("DRAW_OPT_FONT_DIR_T2BR", "(0x01C0)");
        constants.put("DISPLAY_ON", "0x01");
        constants.put("DISPLAY_REFRESH", "0x02");
        constants.put("DISPLAY_POPUP", "0x08");
        constants.put("DISPLAY_REFRESH_DISABLED", "0x40");
        constants.put("DISPLAY_BUSY", "0x80");
        constants.put("DISPLAY_CONTRAST_DEFAULT", "0x5A");
        constants.put("DISPLAY_CONTRAST_MAX", "0x7F");
        constants.put("SCREEN_MODE_RESTORE", "0x00");
        constants.put("SCREEN_MODE_CLEAR", "0x01");
        constants.put("DISPLAY_HEIGHT", "64");
        constants.put("DISPLAY_WIDTH", "100");
        constants.put("DISPLAY_MENUICONS_Y", "40");
        constants.put("DISPLAY_MENUICONS_X_OFFS", "7");
        constants.put("DISPLAY_MENUICONS_X_DIFF", "31");
        constants.put("TEXTLINE_1", "0");
        constants.put("TEXTLINE_2", "1");
        constants.put("TEXTLINE_3", "2");
        constants.put("TEXTLINE_4", "3");
        constants.put("TEXTLINE_5", "4");
        constants.put("TEXTLINE_6", "5");
        constants.put("TEXTLINE_7", "6");
        constants.put("TEXTLINE_8", "7");
        constants.put("TEXTLINES", "8");
        constants.put("MENUICON_LEFT", "0");
        constants.put("MENUICON_CENTER", "1");
        constants.put("MENUICON_RIGHT", "2");
        constants.put("MENUICONS", "3");
        constants.put("FRAME_SELECT", "0");
        constants.put("STATUSTEXT", "1");
        constants.put("MENUTEXT", "2");
        constants.put("STEPLINE", "3");
        constants.put("TOPLINE", "4");
        constants.put("SPECIALS", "5");
        constants.put("STATUSICON_BLUETOOTH", "0");
        constants.put("STATUSICON_USB", "1");
        constants.put("STATUSICON_VM", "2");
        constants.put("STATUSICON_BATTERY", "3");
        constants.put("STATUSICONS", "4");
        constants.put("SCREEN_BACKGROUND", "0");
        constants.put("SCREEN_LARGE", "1");
        constants.put("SCREEN_SMALL", "2");
        constants.put("SCREENS", "3");
        constants.put("BITMAP_1", "0");
        constants.put("BITMAP_2", "1");
        constants.put("BITMAP_3", "2");
        constants.put("BITMAP_4", "3");
        constants.put("BITMAPS", "4");
        constants.put("STEPICON_1", "0");
        constants.put("STEPICON_2", "1");
        constants.put("STEPICON_3", "2");
        constants.put("STEPICON_4", "3");
        constants.put("STEPICON_5", "4");
        constants.put("STEPICONS", "5");
        constants.put("DisplayOffsetPFunc", "0");
        constants.put("DisplayOffsetEraseMask", "4");
        constants.put("DisplayOffsetUpdateMask", "8");
        constants.put("DisplayOffsetPFont", "12");
        constants.put("DisplayOffsetPStatusText", "48");
        constants.put("DisplayOffsetPStatusIcons", "52");
        constants.put("DisplayOffsetPMenuText", "84");
        constants.put("DisplayOffsetPStepIcons", "100");
        constants.put("DisplayOffsetDisplay", "104");
        constants.put("DisplayOffsetFlags", "117");
        constants.put("DisplayOffsetTextLinesCenterFlags", "118");
        constants.put("DisplayOffsetContrast", "1719");
        constants.put("SIZE_OF_USBBUF", "64");
        constants.put("USB_PROTOCOL_OVERHEAD", "2");
        constants.put("SIZE_OF_USBDATA", "62");
        constants.put("SIZE_OF_HSBUF", "128");
        constants.put("SIZE_OF_BTBUF", "128");
        constants.put("BT_CMD_BYTE", "1");
        constants.put("SIZE_OF_BT_DEVICE_TABLE", "30");
        constants.put("SIZE_OF_BT_CONNECT_TABLE", "4");
        constants.put("SIZE_OF_BT_NAME", "16");
        constants.put("SIZE_OF_BRICK_NAME", "8");
        constants.put("SIZE_OF_CLASS_OF_DEVICE", "4");
        constants.put("SIZE_OF_BT_PINCODE", "16");
        constants.put("SIZE_OF_BDADDR", "7");
        constants.put("MAX_BT_MSG_SIZE", "60000");
        constants.put("BT_DEFAULT_INQUIRY_MAX", "0");
        constants.put("BT_DEFAULT_INQUIRY_TIMEOUT_LO", "15");
        constants.put("BT_ARM_OFF", "0");
        constants.put("BT_ARM_CMD_MODE", "1");
        constants.put("BT_ARM_DATA_MODE", "2");
        constants.put("BT_BRICK_VISIBILITY", "0x01");
        constants.put("BT_BRICK_PORT_OPEN", "0x02");
        constants.put("BT_CONNECTION_0_ENABLE", "0x10");
        constants.put("BT_CONNECTION_1_ENABLE", "0x20");
        constants.put("BT_CONNECTION_2_ENABLE", "0x40");
        constants.put("BT_CONNECTION_3_ENABLE", "0x80");
        constants.put("BT_ENABLE", "0x00");
        constants.put("BT_DISABLE", "0x01");
        constants.put("HS_UPDATE", "1");
        constants.put("HS_INITIALISE", "1");
        constants.put("HS_INIT_RECEIVER", "2");
        constants.put("HS_SEND_DATA", "3");
        constants.put("HS_DISABLE", "4");
        constants.put("HS_ENABLE", "5");
        constants.put("HS_CTRL_INIT", "0");
        constants.put("HS_CTRL_UART", "1");
        constants.put("HS_CTRL_EXIT", "2");
        constants.put("HS_BAUD_1200", "0");
        constants.put("HS_BAUD_2400", "1");
        constants.put("HS_BAUD_3600", "2");
        constants.put("HS_BAUD_4800", "3");
        constants.put("HS_BAUD_7200", "4");
        constants.put("HS_BAUD_9600", "5");
        constants.put("HS_BAUD_14400", "6");
        constants.put("HS_BAUD_19200", "7");
        constants.put("HS_BAUD_28800", "8");
        constants.put("HS_BAUD_38400", "9");
        constants.put("HS_BAUD_57600", "10");
        constants.put("HS_BAUD_76800", "11");
        constants.put("HS_BAUD_115200", "12");
        constants.put("HS_BAUD_230400", "13");
        constants.put("HS_BAUD_460800", "14");
        constants.put("HS_BAUD_921600", "15");
        constants.put("HS_MODE_5_DATA", "0x0000");
        constants.put("HS_MODE_6_DATA", "0x0040");
        constants.put("HS_MODE_7_DATA", "0x0080");
        constants.put("HS_MODE_8_DATA", "0x00C0");
        constants.put("HS_MODE_10_STOP", "0x0000");
        constants.put("HS_MODE_15_STOP", "0x1000");
        constants.put("HS_MODE_20_STOP", "0x2000");
        constants.put("HS_MODE_E_PARITY", "0x0000");
        constants.put("HS_MODE_O_PARITY", "0x0200");
        constants.put("HS_MODE_S_PARITY", "0x0400");
        constants.put("HS_MODE_M_PARITY", "0x0600");
        constants.put("HS_MODE_N_PARITY", "0x0800");
        constants.put("HS_MODE_8N1", "(0x00C0|0x0800|0x0000)");
        constants.put("HS_MODE_7E1", "(0x0080|0x0000|0x0000)");
        constants.put("BT_DEVICE_EMPTY", "0x00");
        constants.put("BT_DEVICE_UNKNOWN", "0x01");
        constants.put("BT_DEVICE_KNOWN", "0x02");
        constants.put("BT_DEVICE_NAME", "0x40");
        constants.put("BT_DEVICE_AWAY", "0x80");
        constants.put("INTF_SENDFILE", "0");
        constants.put("INTF_SEARCH", "1");
        constants.put("INTF_STOPSEARCH", "2");
        constants.put("INTF_CONNECT", "3");
        constants.put("INTF_DISCONNECT", "4");
        constants.put("INTF_DISCONNECTALL", "5");
        constants.put("INTF_REMOVEDEVICE", "6");
        constants.put("INTF_VISIBILITY", "7");
        constants.put("INTF_SETCMDMODE", "8");
        constants.put("INTF_OPENSTREAM", "9");
        constants.put("INTF_SENDDATA", "10");
        constants.put("INTF_FACTORYRESET", "11");
        constants.put("INTF_BTON", "12");
        constants.put("INTF_BTOFF", "13");
        constants.put("INTF_SETBTNAME", "14");
        constants.put("INTF_EXTREAD", "15");
        constants.put("INTF_PINREQ", "16");
        constants.put("INTF_CONNECTREQ", "17");
        constants.put("INTF_CONNECTBYNAME", "18");
        constants.put("LR_SUCCESS", "0x50");
        constants.put("LR_COULD_NOT_SAVE", "0x51");
        constants.put("LR_STORE_IS_FULL", "0x52");
        constants.put("LR_ENTRY_REMOVED", "0x53");
        constants.put("LR_UNKNOWN_ADDR", "0x54");
        constants.put("USB_CMD_READY", "0x01");
        constants.put("BT_CMD_READY", "0x02");
        constants.put("HS_CMD_READY", "0x04");
        constants.put("CommOffsetPFunc", "0");
        constants.put("CommOffsetPFuncTwo", "4");
        constants.put("CommOffsetBrickDataName", "1126");
        constants.put("CommOffsetBrickDataBluecoreVersion", "1142");
        constants.put("CommOffsetBrickDataBdAddr", "1144");
        constants.put("CommOffsetBrickDataBtStateStatus", "1151");
        constants.put("CommOffsetBrickDataBtHwStatus", "1152");
        constants.put("CommOffsetBrickDataTimeOutValue", "1153");
        constants.put("CommOffsetBtInBufBuf", "1157");
        constants.put("CommOffsetBtInBufInPtr", "1285");
        constants.put("CommOffsetBtInBufOutPtr", "1286");
        constants.put("CommOffsetBtOutBufBuf", "1289");
        constants.put("CommOffsetBtOutBufInPtr", "1417");
        constants.put("CommOffsetBtOutBufOutPtr", "1418");
        constants.put("CommOffsetHsInBufBuf", "1421");
        constants.put("CommOffsetHsInBufInPtr", "1549");
        constants.put("CommOffsetHsInBufOutPtr", "1550");
        constants.put("CommOffsetHsOutBufBuf", "1553");
        constants.put("CommOffsetHsOutBufInPtr", "1681");
        constants.put("CommOffsetHsOutBufOutPtr", "1682");
        constants.put("CommOffsetUsbInBufBuf", "1685");
        constants.put("CommOffsetUsbInBufInPtr", "1749");
        constants.put("CommOffsetUsbInBufOutPtr", "1750");
        constants.put("CommOffsetUsbOutBufBuf", "1753");
        constants.put("CommOffsetUsbOutBufInPtr", "1817");
        constants.put("CommOffsetUsbOutBufOutPtr", "1818");
        constants.put("CommOffsetUsbPollBufBuf", "1821");
        constants.put("CommOffsetUsbPollBufInPtr", "1885");
        constants.put("CommOffsetUsbPollBufOutPtr", "1886");
        constants.put("CommOffsetBtDeviceCnt", "1889");
        constants.put("CommOffsetBtDeviceNameCnt", "1890");
        constants.put("CommOffsetHsFlags", "1891");
        constants.put("CommOffsetHsSpeed", "1892");
        constants.put("CommOffsetHsState", "1893");
        constants.put("CommOffsetUsbState", "1894");
        constants.put("CommOffsetHsMode", "1895");
        constants.put("RCX_OUT_A", "0x01");
        constants.put("RCX_OUT_B", "0x02");
        constants.put("RCX_OUT_C", "0x04");
        constants.put("RCX_OUT_AB", "0x03");
        constants.put("RCX_OUT_AC", "0x05");
        constants.put("RCX_OUT_BC", "0x06");
        constants.put("RCX_OUT_ABC", "0x07");
        constants.put("RCX_OUT_FLOAT", "0");
        constants.put("RCX_OUT_OFF", "0x40");
        constants.put("RCX_OUT_ON", "0x80");
        constants.put("RCX_OUT_REV", "0");
        constants.put("RCX_OUT_TOGGLE", "0x40");
        constants.put("RCX_OUT_FWD", "0x80");
        constants.put("RCX_OUT_LOW", "0");
        constants.put("RCX_OUT_HALF", "3");
        constants.put("RCX_OUT_FULL", "7");
        constants.put("RCX_RemoteKeysReleased", "0x0000");
        constants.put("RCX_RemotePBMessage1", "0x0100");
        constants.put("RCX_RemotePBMessage2", "0x0200");
        constants.put("RCX_RemotePBMessage3", "0x0400");
        constants.put("RCX_RemoteOutAForward", "0x0800");
        constants.put("RCX_RemoteOutBForward", "0x1000");
        constants.put("RCX_RemoteOutCForward", "0x2000");
        constants.put("RCX_RemoteOutABackward", "0x4000");
        constants.put("RCX_RemoteOutBBackward", "0x8000");
        constants.put("RCX_RemoteOutCBackward", "0x0001");
        constants.put("RCX_RemoteSelProgram1", "0x0002");
        constants.put("RCX_RemoteSelProgram2", "0x0004");
        constants.put("RCX_RemoteSelProgram3", "0x0008");
        constants.put("RCX_RemoteSelProgram4", "0x0010");
        constants.put("RCX_RemoteSelProgram5", "0x0020");
        constants.put("RCX_RemoteStopOutOff", "0x0040");
        constants.put("RCX_RemotePlayASound", "0x0080");
        constants.put("SOUND_CLICK", "0");
        constants.put("SOUND_DOUBLE_BEEP", "1");
        constants.put("SOUND_DOWN", "2");
        constants.put("SOUND_UP", "3");
        constants.put("SOUND_LOW_BEEP", "4");
        constants.put("SOUND_FAST_UP", "5");
        constants.put("SCOUT_LIGHT_ON", "0x80");
        constants.put("SCOUT_LIGHT_OFF", "0");
        constants.put("SCOUT_SOUND_REMOTE", "6");
        constants.put("SCOUT_SOUND_ENTERSA", "7");
        constants.put("SCOUT_SOUND_KEYERROR", "8");
        constants.put("SCOUT_SOUND_NONE", "9");
        constants.put("SCOUT_SOUND_TOUCH1_PRES", "10");
        constants.put("SCOUT_SOUND_TOUCH1_REL", "11");
        constants.put("SCOUT_SOUND_TOUCH2_PRES", "12");
        constants.put("SCOUT_SOUND_TOUCH2_REL", "13");
        constants.put("SCOUT_SOUND_ENTER_BRIGHT", "14");
        constants.put("SCOUT_SOUND_ENTER_NORMAL", "15");
        constants.put("SCOUT_SOUND_ENTER_DARK", "16");
        constants.put("SCOUT_SOUND_1_BLINK", "17");
        constants.put("SCOUT_SOUND_2_BLINK", "18");
        constants.put("SCOUT_SOUND_COUNTER1", "19");
        constants.put("SCOUT_SOUND_COUNTER2", "20");
        constants.put("SCOUT_SOUND_TIMER1", "21");
        constants.put("SCOUT_SOUND_TIMER2", "22");
        constants.put("SCOUT_SOUND_TIMER3", "23");
        constants.put("SCOUT_SOUND_MAIL_RECEIVED", "24");
        constants.put("SCOUT_SOUND_SPECIAL1", "25");
        constants.put("SCOUT_SOUND_SPECIAL2", "26");
        constants.put("SCOUT_SOUND_SPECIAL3", "27");
        constants.put("SCOUT_SNDSET_NONE", "0");
        constants.put("SCOUT_SNDSET_BASIC", "1");
        constants.put("SCOUT_SNDSET_BUG", "2");
        constants.put("SCOUT_SNDSET_ALARM", "3");
        constants.put("SCOUT_SNDSET_RANDOM", "4");
        constants.put("SCOUT_SNDSET_SCIENCE", "5");
        constants.put("SCOUT_MODE_STANDALONE", "0");
        constants.put("SCOUT_MODE_POWER", "1");
        constants.put("SCOUT_MR_NO_MOTION", "0");
        constants.put("SCOUT_MR_FORWARD", "1");
        constants.put("SCOUT_MR_ZIGZAG", "2");
        constants.put("SCOUT_MR_CIRCLE_RIGHT", "3");
        constants.put("SCOUT_MR_CIRCLE_LEFT", "4");
        constants.put("SCOUT_MR_LOOP_A", "5");
        constants.put("SCOUT_MR_LOOP_B", "6");
        constants.put("SCOUT_MR_LOOP_AB", "7");
        constants.put("SCOUT_TR_IGNORE", "0");
        constants.put("SCOUT_TR_REVERSE", "1");
        constants.put("SCOUT_TR_AVOID", "2");
        constants.put("SCOUT_TR_WAIT_FOR", "3");
        constants.put("SCOUT_TR_OFF_WHEN", "4");
        constants.put("SCOUT_LR_IGNORE", "0");
        constants.put("SCOUT_LR_SEEK_LIGHT", "1");
        constants.put("SCOUT_LR_SEEK_DARK", "2");
        constants.put("SCOUT_LR_AVOID", "3");
        constants.put("SCOUT_LR_WAIT_FOR", "4");
        constants.put("SCOUT_LR_OFF_WHEN", "5");
        constants.put("SCOUT_TGS_SHORT", "0");
        constants.put("SCOUT_TGS_MEDIUM", "1");
        constants.put("SCOUT_TGS_LONG", "2");
        constants.put("SCOUT_FXR_NONE", "0");
        constants.put("SCOUT_FXR_BUG", "1");
        constants.put("SCOUT_FXR_ALARM", "2");
        constants.put("SCOUT_FXR_RANDOM", "3");
        constants.put("SCOUT_FXR_SCIENCE", "4");
        constants.put("RCX_VariableSrc", "0");
        constants.put("RCX_TimerSrc", "1");
        constants.put("RCX_ConstantSrc", "2");
        constants.put("RCX_OutputStatusSrc", "3");
        constants.put("RCX_RandomSrc", "4");
        constants.put("RCX_ProgramSlotSrc", "8");
        constants.put("RCX_InputValueSrc", "9");
        constants.put("RCX_InputTypeSrc", "10");
        constants.put("RCX_InputModeSrc", "11");
        constants.put("RCX_InputRawSrc", "12");
        constants.put("RCX_InputBooleanSrc", "13");
        constants.put("RCX_WatchSrc", "14");
        constants.put("RCX_MessageSrc", "15");
        constants.put("RCX_GlobalMotorStatusSrc", "17");
        constants.put("RCX_ScoutRulesSrc", "18");
        constants.put("RCX_ScoutLightParamsSrc", "19");
        constants.put("RCX_ScoutTimerLimitSrc", "20");
        constants.put("RCX_CounterSrc", "21");
        constants.put("RCX_ScoutCounterLimitSrc", "22");
        constants.put("RCX_TaskEventsSrc", "23");
        constants.put("RCX_ScoutEventFBSrc", "24");
        constants.put("RCX_EventStateSrc", "25");
        constants.put("RCX_TenMSTimerSrc", "26");
        constants.put("RCX_ClickCounterSrc", "27");
        constants.put("RCX_UpperThresholdSrc", "28");
        constants.put("RCX_LowerThresholdSrc", "29");
        constants.put("RCX_HysteresisSrc", "30");
        constants.put("RCX_DurationSrc", "31");
        constants.put("RCX_UARTSetupSrc", "33");
        constants.put("RCX_BatteryLevelSrc", "34");
        constants.put("RCX_FirmwareVersionSrc", "35");
        constants.put("RCX_IndirectVarSrc", "36");
        constants.put("RCX_DatalogSrcIndirectSrc", "37");
        constants.put("RCX_DatalogSrcDirectSrc", "38");
        constants.put("RCX_DatalogValueIndirectSrc", "39");
        constants.put("RCX_DatalogValueDirectSrc", "40");
        constants.put("RCX_DatalogRawIndirectSrc", "41");
        constants.put("RCX_DatalogRawDirectSrc", "42");
        constants.put("RCX_PingOp", "0x10");
        constants.put("RCX_BatteryLevelOp", "0x30");
        constants.put("RCX_DeleteTasksOp", "0x40");
        constants.put("RCX_StopAllTasksOp", "0x50");
        constants.put("RCX_PBTurnOffOp", "0x60");
        constants.put("RCX_DeleteSubsOp", "0x70");
        constants.put("RCX_ClearSoundOp", "0x80");
        constants.put("RCX_ClearMsgOp", "0x90");
        constants.put("RCX_LSCalibrateOp", "0xc0");
        constants.put("RCX_MuteSoundOp", "0xd0");
        constants.put("RCX_UnmuteSoundOp", "0xe0");
        constants.put("RCX_ClearAllEventsOp", "0x06");
        constants.put("RCX_OnOffFloatOp", "0x21");
        constants.put("RCX_IRModeOp", "0x31");
        constants.put("RCX_PlaySoundOp", "0x51");
        constants.put("RCX_DeleteTaskOp", "0x61");
        constants.put("RCX_StartTaskOp", "0x71");
        constants.put("RCX_StopTaskOp", "0x81");
        constants.put("RCX_SelectProgramOp", "0x91");
        constants.put("RCX_ClearTimerOp", "0xa1");
        constants.put("RCX_AutoOffOp", "0xb1");
        constants.put("RCX_DeleteSubOp", "0xc1");
        constants.put("RCX_ClearSensorOp", "0xd1");
        constants.put("RCX_OutputDirOp", "0xe1");
        constants.put("RCX_PlayToneVarOp", "0x02");
        constants.put("RCX_PollOp", "0x12");
        constants.put("RCX_SetWatchOp", "0x22");
        constants.put("RCX_InputTypeOp", "0x32");
        constants.put("RCX_InputModeOp", "0x42");
        constants.put("RCX_SetDatalogOp", "0x52");
        constants.put("RCX_DatalogOp", "0x62");
        constants.put("RCX_SendUARTDataOp", "0xc2");
        constants.put("RCX_RemoteOp", "0xd2");
        constants.put("RCX_VLLOp", "0xe2");
        constants.put("RCX_DirectEventOp", "0x03");
        constants.put("RCX_OutputPowerOp", "0x13");
        constants.put("RCX_PlayToneOp", "0x23");
        constants.put("RCX_DisplayOp", "0x33");
        constants.put("RCX_PollMemoryOp", "0x63");
        constants.put("RCX_SetFeedbackOp", "0x83");
        constants.put("RCX_SetEventOp", "0x93");
        constants.put("RCX_GOutputPowerOp", "0xa3");
        constants.put("RCX_LSUpperThreshOp", "0xb3");
        constants.put("RCX_LSLowerThreshOp", "0xc3");
        constants.put("RCX_LSHysteresisOp", "0xd3");
        constants.put("RCX_LSBlinkTimeOp", "0xe3");
        constants.put("RCX_CalibrateEventOp", "0x04");
        constants.put("RCX_SetVarOp", "0x14");
        constants.put("RCX_SumVarOp", "0x24");
        constants.put("RCX_SubVarOp", "0x34");
        constants.put("RCX_DivVarOp", "0x44");
        constants.put("RCX_MulVarOp", "0x54");
        constants.put("RCX_SgnVarOp", "0x64");
        constants.put("RCX_AbsVarOp", "0x74");
        constants.put("RCX_AndVarOp", "0x84");
        constants.put("RCX_OrVarOp", "0x94");
        constants.put("RCX_UploadDatalogOp", "0xa4");
        constants.put("RCX_SetTimerLimitOp", "0xc4");
        constants.put("RCX_SetCounterOp", "0xd4");
        constants.put("RCX_SetSourceValueOp", "0x05");
        constants.put("RCX_UnlockOp", "0x15");
        constants.put("RCX_BootModeOp", "0x65");
        constants.put("RCX_UnlockFirmOp", "0xa5");
        constants.put("RCX_ScoutRulesOp", "0xd5");
        constants.put("RCX_ViewSourceValOp", "0xe5");
        constants.put("RCX_ScoutOp", "0x47");
        constants.put("RCX_SoundOp", "0x57");
        constants.put("RCX_GOutputModeOp", "0x67");
        constants.put("RCX_GOutputDirOp", "0x77");
        constants.put("RCX_LightOp", "0x87");
        constants.put("RCX_IncCounterOp", "0x97");
        constants.put("RCX_DecCounterOp", "0xa7");
        constants.put("RCX_ClearCounterOp", "0xb7");
        constants.put("RCX_SetPriorityOp", "0xd7");
        constants.put("RCX_MessageOp", "0xf7");
        constants.put("PF_CMD_STOP", "0");
        constants.put("PF_CMD_FWD", "1");
        constants.put("PF_CMD_REV", "2");
        constants.put("PF_CMD_BRAKE", "3");
        constants.put("PF_CHANNEL_1", "0");
        constants.put("PF_CHANNEL_2", "1");
        constants.put("PF_CHANNEL_3", "2");
        constants.put("PF_CHANNEL_4", "3");
        constants.put("PF_MODE_TRAIN", "0");
        constants.put("PF_MODE_COMBO_DIRECT", "1");
        constants.put("PF_MODE_SINGLE_PIN_CONT", "2");
        constants.put("PF_MODE_SINGLE_PIN_TIME", "3");
        constants.put("PF_MODE_COMBO_PWM", "4");
        constants.put("PF_MODE_SINGLE_OUTPUT_PWM", "4");
        constants.put("PF_MODE_SINGLE_OUTPUT_CST", "6");
        constants.put("TRAIN_FUNC_STOP", "0");
        constants.put("TRAIN_FUNC_INCR_SPEED", "1");
        constants.put("TRAIN_FUNC_DECR_SPEED", "2");
        constants.put("TRAIN_FUNC_TOGGLE_LIGHT", "4");
        constants.put("TRAIN_CHANNEL_1", "0");
        constants.put("TRAIN_CHANNEL_2", "1");
        constants.put("TRAIN_CHANNEL_3", "2");
        constants.put("TRAIN_CHANNEL_ALL", "3");
        constants.put("PF_OUT_A", "0");
        constants.put("PF_OUT_B", "1");
        constants.put("PF_PIN_C1", "0");
        constants.put("PF_PIN_C2", "1");
        constants.put("PF_FUNC_NOCHANGE", "0");
        constants.put("PF_FUNC_CLEAR", "1");
        constants.put("PF_FUNC_SET", "2");
        constants.put("PF_FUNC_TOGGLE", "3");
        constants.put("PF_CST_CLEAR1_CLEAR2", "0");
        constants.put("PF_CST_SET1_CLEAR2", "1");
        constants.put("PF_CST_CLEAR1_SET2", "2");
        constants.put("PF_CST_SET1_SET2", "3");
        constants.put("PF_CST_INCREMENT_PWM", "4");
        constants.put("PF_CST_DECREMENT_PWM", "5");
        constants.put("PF_CST_FULL_FWD", "6");
        constants.put("PF_CST_FULL_REV", "7");
        constants.put("PF_CST_TOGGLE_DIR", "8");
        constants.put("PF_PWM_FLOAT", "0");
        constants.put("PF_PWM_FWD1", "1");
        constants.put("PF_PWM_FWD2", "2");
        constants.put("PF_PWM_FWD3", "3");
        constants.put("PF_PWM_FWD4", "4");
        constants.put("PF_PWM_FWD5", "5");
        constants.put("PF_PWM_FWD6", "6");
        constants.put("PF_PWM_FWD7", "7");
        constants.put("PF_PWM_BRAKE", "8");
        constants.put("PF_PWM_REV7", "9");
        constants.put("PF_PWM_REV6", "10");
        constants.put("PF_PWM_REV5", "11");
        constants.put("PF_PWM_REV4", "12");
        constants.put("PF_PWM_REV3", "13");
        constants.put("PF_PWM_REV2", "14");
        constants.put("PF_PWM_REV1", "15");
        constants.put("HTIR2_MODE_1200", "0");
        constants.put("HTIR2_MODE_600", "1");
        constants.put("HTIR2_REG_MODE", "0x41");
        constants.put("HTIR2_REG_DCDIR", "0x42");
        constants.put("HTIR2_REG_DC01", "0x43");
        constants.put("HTIR2_REG_DC02", "0x44");
        constants.put("HTIR2_REG_DC03", "0x45");
        constants.put("HTIR2_REG_DC04", "0x46");
        constants.put("HTIR2_REG_DC05", "0x47");
        constants.put("HTIR2_REG_DCAVG", "0x48");
        constants.put("HTIR2_REG_ACDIR", "0x49");
        constants.put("HTIR2_REG_AC01", "0x4A");
        constants.put("HTIR2_REG_AC02", "0x4B");
        constants.put("HTIR2_REG_AC03", "0x4C");
        constants.put("HTIR2_REG_AC04", "0x4D");
        constants.put("HTIR2_REG_AC05", "0x4E");
        constants.put("HT_CH1_A", "0");
        constants.put("HT_CH1_B", "1");
        constants.put("HT_CH2_A", "2");
        constants.put("HT_CH2_B", "3");
        constants.put("HT_CH3_A", "4");
        constants.put("HT_CH3_B", "5");
        constants.put("HT_CH4_A", "6");
        constants.put("HT_CH4_B", "7");
        constants.put("HT_CMD_COLOR2_ACTIVE", "0x00");
        constants.put("HT_CMD_COLOR2_PASSIVE", "0x01");
        constants.put("HT_CMD_COLOR2_RAW", "0x03");
        constants.put("HT_CMD_COLOR2_50HZ", "0x35");
        constants.put("HT_CMD_COLOR2_60HZ", "0x36");
        constants.put("HT_CMD_COLOR2_BLCAL", "0x42");
        constants.put("HT_CMD_COLOR2_WBCAL", "0x43");
        constants.put("HT_CMD_COLOR2_FAR", "0x46");
        constants.put("HT_CMD_COLOR2_LED_HI", "0x48");
        constants.put("HT_CMD_COLOR2_LED_LOW", "0x4C");
        constants.put("HT_CMD_COLOR2_NEAR", "0x4E");
        constants.put("MS_CMD_ENERGIZED", "0x45");
        constants.put("MS_CMD_DEENERGIZED", "0x44");
        constants.put("MS_CMD_ADPA_ON", "0x4E");
        constants.put("MS_CMD_ADPA_OFF", "0x4F");
        constants.put("DIST_CMD_GP2D12", "0x31");
        constants.put("DIST_CMD_GP2D120", "0x32");
        constants.put("DIST_CMD_GP2YA21", "0x33");
        constants.put("DIST_CMD_GP2YA02", "0x34");
        constants.put("DIST_CMD_CUSTOM", "0x35");
        constants.put("DIST_REG_DIST", "0x42");
        constants.put("DIST_REG_VOLT", "0x44");
        constants.put("DIST_REG_MODULE_TYPE", "0x50");
        constants.put("DIST_REG_NUM_POINTS", "0x51");
        constants.put("DIST_REG_DIST_MIN", "0x52");
        constants.put("DIST_REG_DIST_MAX", "0x54");
        constants.put("DIST_REG_VOLT1", "0x56");
        constants.put("DIST_REG_DIST1", "0x58");
        constants.put("PSP_CMD_DIGITAL", "0x41");
        constants.put("PSP_CMD_ANALOG", "0x73");
        constants.put("PSP_REG_BTNSET1", "0x42");
        constants.put("PSP_REG_BTNSET2", "0x43");
        constants.put("PSP_REG_XLEFT", "0x44");
        constants.put("PSP_REG_YLEFT", "0x45");
        constants.put("PSP_REG_XRIGHT", "0x46");
        constants.put("PSP_REG_YRIGHT", "0x47");
        constants.put("PSP_BTNSET1_LEFT", "0x01");
        constants.put("PSP_BTNSET1_DOWN", "0x02");
        constants.put("PSP_BTNSET1_RIGHT", "0x04");
        constants.put("PSP_BTNSET1_UP", "0x08");
        constants.put("PSP_BTNSET1_R3", "0x20");
        constants.put("PSP_BTNSET1_L3", "0x40");
        constants.put("PSP_BTNSET2_SQUARE", "0x01");
        constants.put("PSP_BTNSET2_CROSS", "0x02");
        constants.put("PSP_BTNSET2_CIRCLE", "0x04");
        constants.put("PSP_BTNSET2_TRIANGLE", "0x08");
        constants.put("PSP_BTNSET2_R1", "0x10");
        constants.put("PSP_BTNSET2_L1", "0x20");
        constants.put("PSP_BTNSET2_R2", "0x40");
        constants.put("PSP_BTNSET2_L2", "0x80");
        constants.put("NRLINK_CMD_2400", "0x44");
        constants.put("NRLINK_CMD_FLUSH", "0x46");
        constants.put("NRLINK_CMD_4800", "0x48");
        constants.put("NRLINK_CMD_IR_LONG", "0x4C");
        constants.put("NRLINK_CMD_IR_SHORT", "0x53");
        constants.put("NRLINK_CMD_RUN_MACRO", "0x52");
        constants.put("NRLINK_CMD_TX_RAW", "0x55");
        constants.put("NRLINK_CMD_SET_RCX", "0x58");
        constants.put("NRLINK_CMD_SET_TRAIN", "0x54");
        constants.put("NRLINK_CMD_SET_PF", "0x50");
        constants.put("NRLINK_REG_BYTES", "0x40");
        constants.put("NRLINK_REG_DATA", "0x42");
        constants.put("NRLINK_REG_EEPROM", "0x50");
        constants.put("CHAR_BIT", "8");
        constants.put("SCHAR_MIN", "-127");
        constants.put("SCHAR_MAX", "127");
        constants.put("UCHAR_MAX", "255");
        constants.put("CHAR_MIN", "-127");
        constants.put("CHAR_MAX", "127");
        constants.put("SHRT_MIN", "-32767");
        constants.put("SHRT_MAX", "32767");
        constants.put("USHRT_MAX", "65535");
        constants.put("INT_MIN", "-32767");
        constants.put("INT_MAX", "32767");
        constants.put("UINT_MAX", "65535");
        constants.put("LONG_MIN", "-2147483647");
        constants.put("LONG_MAX", "2147483647");
        constants.put("ULONG_MAX", "4294967295");
        constants.put("RAND_MAX", "32768");
        constants.put("GL_POLYGON", "1");
        constants.put("GL_LINE", "2");
        constants.put("GL_POINT", "3");
        constants.put("GL_CIRCLE", "4");
        constants.put("GL_TRANSLATE_X", "1");
        constants.put("GL_TRANSLATE_Y", "2");
        constants.put("GL_TRANSLATE_Z", "3");
        constants.put("GL_ROTATE_X", "4");
        constants.put("GL_ROTATE_Y", "5");
        constants.put("GL_ROTATE_Z", "6");
        constants.put("GL_SCALE_X", "7");
        constants.put("GL_SCALE_Y", "8");
        constants.put("GL_SCALE_Z", "9");
        constants.put("GL_CIRCLE_SIZE", "1");
        constants.put("GL_CULL_MODE", "2");
        constants.put("GL_CAMERA_DEPTH", "3");
        constants.put("GL_ZOOM_FACTOR", "4");
        constants.put("GL_CULL_BACK", "2");
        constants.put("GL_CULL_FRONT", "3");
        constants.put("GL_CULL_NONE", "4");
        constants.put("u8", "unsigned char");
        constants.put("s8", "char");
        constants.put("u16", "unsigned int");
        constants.put("s16", "int");
        constants.put("u32", "unsigned long");
        constants.put("s32", "long");
        constants.put("S1", "0");
        constants.put("S2", "1");
        constants.put("S3", "2");
        constants.put("S4", "3");
        constants.put("SENSOR_TYPE_NONE", "0x00");
        constants.put("SENSOR_TYPE_TOUCH", "0x01");
        constants.put("SENSOR_TYPE_TEMPERATURE", "0x02");
        constants.put("SENSOR_TYPE_LIGHT", "0x03");
        constants.put("SENSOR_TYPE_ROTATION", "0x04");
        constants.put("SENSOR_TYPE_LIGHT_ACTIVE", "0x05");
        constants.put("SENSOR_TYPE_LIGHT_INACTIVE", "0x06");
        constants.put("SENSOR_TYPE_SOUND_DB", "0x07");
        constants.put("SENSOR_TYPE_SOUND_DBA", "0x08");
        constants.put("SENSOR_TYPE_CUSTOM", "0x09");
        constants.put("SENSOR_TYPE_LOWSPEED", "0x0A");
        constants.put("SENSOR_TYPE_LOWSPEED_9V", "0x0B");
        constants.put("SENSOR_TYPE_HIGHSPEED", "0x0C");
        constants.put("SENSOR_TYPE_COLORFULL", "0x0D");
        constants.put("SENSOR_TYPE_COLORRED", "0x0E");
        constants.put("SENSOR_TYPE_COLORGREEN", "0x0F");
        constants.put("SENSOR_TYPE_COLORBLUE", "0x10");
        constants.put("SENSOR_TYPE_COLORNONE", "0x11");
        constants.put("SENSOR_MODE_RAW", "0x00");
        constants.put("SENSOR_MODE_BOOL", "0x20");
        constants.put("SENSOR_MODE_EDGE", "0x40");
        constants.put("SENSOR_MODE_PULSE", "0x60");
        constants.put("SENSOR_MODE_PERCENT", "0x80");
        constants.put("SENSOR_MODE_CELSIUS", "0xA0");
        constants.put("SENSOR_MODE_FAHRENHEIT", "0xC0");
        constants.put("SENSOR_MODE_ROTATION", "0xE0");
        constants.put("SENSOR_TOUCH", "_SENSOR_CFG(0x01, 0x20)");
        constants.put("SENSOR_LIGHT", "_SENSOR_CFG(0x03, 0x80)");
        constants.put("SENSOR_ROTATION", "_SENSOR_CFG(0x04, 0xE0)");
        constants.put("SENSOR_CELSIUS", "_SENSOR_CFG(0x02, 0xA0)");
        constants.put("SENSOR_FAHRENHEIT", "_SENSOR_CFG(0x02, 0xC0)");
        constants.put("SENSOR_PULSE", "_SENSOR_CFG(0x01, 0x60)");
        constants.put("SENSOR_EDGE", "_SENSOR_CFG(0x01, 0x40)");
        constants.put("SENSOR_NXTLIGHT", "_SENSOR_CFG(0x05, 0x80)");
        constants.put("SENSOR_SOUND", "_SENSOR_CFG(0x07, 0x80)");
        constants.put("SENSOR_LOWSPEED_9V", "_SENSOR_CFG(0x0B, 0x00)");
        constants.put("SENSOR_LOWSPEED", "_SENSOR_CFG(0x0A, 0x00)");
        constants.put("SENSOR_COLORFULL", "_SENSOR_CFG(0x0D, 0x00)");
        constants.put("SENSOR_COLORRED", "_SENSOR_CFG(0x0E, 0x80)");
        constants.put("SENSOR_COLORGREEN", "_SENSOR_CFG(0x0F, 0x80)");
        constants.put("SENSOR_COLORBLUE", "_SENSOR_CFG(0x10, 0x80)");
        constants.put("SENSOR_COLORNONE", "_SENSOR_CFG(0x11, 0x80)");
        constants.put("SENSOR_1", "Sensor(0)");
        constants.put("SENSOR_2", "Sensor(1)");
        constants.put("SENSOR_3", "Sensor(2)");
        constants.put("SENSOR_4", "Sensor(3)");
        constants.put("SEEK_SET", "0");
        constants.put("SEEK_CUR", "1");
        constants.put("SEEK_END", "2");
    }
}