package editeurNXC.utils;

import editeurNXC.parser.NXCDefs;
import java.io.IOException;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/01/12 14:46 from the specification file
 * <tt>D:/Programmation/ProjetRobot/AncienSimuStorm/src/gui/NXC.flex</tt>
 */
public class NXCTokenMaker extends AbstractJFlexCTokenMaker {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	/**
	 * lexical states
	 */
	public static final int EOL_COMMENT = 4;
	public static final int YYINITIAL = 0;
	public static final int MLC = 2;
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2
	};
	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
			"\11\0\1\43\1\34\1\0\1\43\1\52\22\0\1\43\1\61\1\42"
			+ "\1\53\1\54\1\62\1\105\1\41\1\56\1\56\1\45\1\57\1\61"
			+ "\1\7\1\50\1\44\1\40\3\32\4\5\2\3\1\64\1\60\1\102"
			+ "\1\101\1\103\1\35\1\55\1\71\1\4\1\77\1\70\1\6\1\51"
			+ "\2\1\1\73\2\1\1\47\1\74\1\75\4\1\1\76\1\72\1\46"
			+ "\2\1\1\33\2\1\1\56\1\31\1\56\1\104\1\2\1\0\1\20"
			+ "\1\37\1\26\1\10\1\11\1\12\1\30\1\63\1\13\1\1\1\65"
			+ "\1\17\1\23\1\14\1\15\1\24\1\1\1\22\1\21\1\25\1\27"
			+ "\1\36\1\16\1\67\1\66\1\1\1\100\1\106\1\100\1\61\uff81\0";
	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	private static final String ZZ_ACTION_PACKED_0 =
			"\3\0\1\1\2\2\1\3\1\4\16\2\1\5\1\6"
			+ "\1\4\2\2\1\3\1\7\1\10\1\11\3\4\2\1"
			+ "\1\12\1\4\1\5\4\4\3\13\1\14\5\13\1\15"
			+ "\1\13\1\2\2\16\2\3\1\17\1\2\1\20\32\2"
			+ "\1\16\1\21\1\7\1\22\2\10\1\23\1\24\1\25"
			+ "\6\1\4\0\1\26\5\0\5\2\1\3\1\0\1\3"
			+ "\1\16\1\17\6\2\1\27\27\2\1\30\1\7\1\31"
			+ "\2\21\1\7\1\21\2\10\1\32\5\1\1\33\5\1"
			+ "\16\0\5\2\1\17\1\0\12\2\1\34\5\2\2\30"
			+ "\1\7\1\10\11\1\5\0\1\33\6\0\1\35\2\0"
			+ "\1\36\1\0\11\2\1\30\1\1\1\33\4\1\15\0"
			+ "\5\2\4\1\1\0\1\33\4\0\2\2\1\1\4\0"
			+ "\1\33\1\1\2\0";

	private static int[] zzUnpackAction() {
		int[] result = new int[296];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"
			+ "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"
			+ "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\325\0\u061a"
			+ "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"
			+ "\0\u0852\0\u0899\0\u061a\0\u08e0\0\u061a\0\u0927\0\u061a\0\u096e"
			+ "\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u061a\0\u0b5f"
			+ "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u061a\0\u0cc2\0\u0d09\0\u0d50"
			+ "\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u011c\0\u0efa\0\u0f41"
			+ "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"
			+ "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"
			+ "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9"
			+ "\0\u1630\0\u1677\0\u16be\0\u061a\0\u1705\0\u174c\0\u061a\0\u061a"
			+ "\0\u061a\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"
			+ "\0\u1984\0\u19cb\0\u1a12\0\u061a\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"
			+ "\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"
			+ "\0\u0d50\0\u1dad\0\u0d50\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"
			+ "\0\u1f57\0\u011c\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"
			+ "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339"
			+ "\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571"
			+ "\0\u25b8\0\u25ff\0\u2646\0\u061a\0\u268d\0\u26d4\0\u271b\0\u2762"
			+ "\0\u27a9\0\u27f0\0\u061a\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953"
			+ "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b"
			+ "\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3"
			+ "\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb"
			+ "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233"
			+ "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u011c\0\u33dd\0\u3424"
			+ "\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c"
			+ "\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894"
			+ "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"
			+ "\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"
			+ "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c"
			+ "\0\u3f83\0\u3fca\0\u0d50\0\u4011\0\325\0\u4058\0\u409f\0\u40e6"
			+ "\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e"
			+ "\0\u4365\0\u43ac\0\u43f3\0\u3c2f\0\u443a\0\u3d04\0\u4481\0\u44c8"
			+ "\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700"
			+ "\0\u061a\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1"
			+ "\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u011c\0\u4a54\0\u4a9b\0\u4ae2";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[296];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	private static final String ZZ_TRANS_PACKED_0 =
			"\1\4\1\5\1\6\1\7\1\5\1\7\1\5\1\10"
			+ "\1\11\1\12\1\13\1\14\2\5\1\15\1\16\1\5"
			+ "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\27\1\7\1\5\1\30\1\31\1\32\1\33\1\34"
			+ "\1\35\1\36\1\37\1\40\1\41\2\5\1\42\1\5"
			+ "\1\43\1\44\2\4\1\45\1\46\1\47\1\31\1\41"
			+ "\1\5\1\31\13\5\1\45\1\41\1\50\1\51\1\41"
			+ "\1\52\1\53\12\54\1\55\3\54\1\56\15\54\1\57"
			+ "\10\54\1\60\15\54\1\61\23\54\12\62\1\63\3\62"
			+ "\1\64\15\62\1\65\26\62\1\66\23\62\7\4\1\0"
			+ "\24\4\2\0\3\4\5\0\2\4\1\0\1\4\1\0"
			+ "\3\4\5\0\1\4\1\0\13\4\7\0\1\4\6\5"
			+ "\1\0\21\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\1\5\1\67\4\5\1\0"
			+ "\21\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\3\70\1\7\1\70\1\7\1\71\1\0"
			+ "\1\70\1\71\5\70\1\72\7\70\1\73\2\70\1\7"
			+ "\1\70\2\0\2\70\1\7\5\0\1\73\1\72\1\74"
			+ "\1\70\1\0\3\70\5\0\1\70\1\0\13\70\16\0"
			+ "\1\31\71\0\1\31\5\0\1\4\6\5\1\0\1\5"
			+ "\1\75\3\5\1\76\13\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\4\5\1\77\2\5\1\100\11\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\5\5\1\101\1\5\1\102\1\103\10\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\2\5\1\76\1\5\1\104\14\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\21\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\105\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\5\5\1\106\13\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\6\5\1\107\6\5\1\110\1\5\1\111\1\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\112\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\1\5\1\113\17\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\17\5\1\114\1\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\12\5\1\115\6\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\10\5\1\116\1\5\1\117\6\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\1\5\1\120\11\5\7\0"
			+ "\1\4\6\5\1\0\5\5\1\121\2\5\1\100\10\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\122\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\4\5\1\123\14\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\5\5\1\124\13\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\116\0\1\4"
			+ "\6\5\1\0\5\5\1\125\13\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\5\5\1\126\4\5\1\127\6\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\1\5\1\130\11\5"
			+ "\7\0\3\70\1\7\1\70\1\7\1\71\1\0\1\70"
			+ "\1\71\5\70\1\72\7\70\1\73\2\70\1\7\1\131"
			+ "\2\0\2\70\1\7\5\0\1\73\1\72\1\74\1\70"
			+ "\1\0\3\70\5\0\1\70\1\0\2\70\1\131\10\70"
			+ "\7\0\31\132\1\133\2\132\1\0\4\132\1\134\45\132"
			+ "\31\36\1\135\2\36\1\136\5\36\1\137\44\36\43\0"
			+ "\1\37\107\0\1\140\1\141\33\0\1\31\106\0\1\31"
			+ "\10\0\1\74\1\0\1\74\24\0\1\74\5\0\1\74"
			+ "\46\0\7\4\1\0\1\142\1\143\1\4\1\144\3\4"
			+ "\1\145\4\4\1\146\2\4\1\147\4\4\2\0\3\4"
			+ "\2\0\1\150\2\0\2\4\1\0\1\4\1\0\3\4"
			+ "\5\0\1\4\1\0\13\4\66\0\1\31\21\0\1\31"
			+ "\106\0\1\31\1\41\105\0\1\31\1\0\1\41\104\0"
			+ "\1\31\3\0\1\31\102\0\1\31\4\0\1\31\12\54"
			+ "\1\0\3\54\1\0\15\54\1\0\10\54\1\0\15\54"
			+ "\1\0\23\54\13\0\1\151\11\0\1\152\77\0\1\153"
			+ "\134\0\1\154\67\0\1\155\61\0\12\62\1\0\3\62"
			+ "\1\0\15\62\1\0\26\62\1\0\23\62\13\0\1\156"
			+ "\11\0\1\157\77\0\1\160\115\0\1\161\61\0\1\4"
			+ "\6\5\1\0\21\5\1\4\2\5\2\0\3\5\5\0"
			+ "\1\5\1\162\1\0\1\163\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\3\5\1\164\1\5\1\165\3\5"
			+ "\1\166\1\5\7\0\7\70\1\0\24\70\2\0\3\70"
			+ "\5\0\2\70\1\0\1\70\1\0\3\70\5\0\1\70"
			+ "\1\0\13\70\7\0\3\70\1\167\1\70\1\167\1\70"
			+ "\1\170\22\70\1\167\1\70\2\0\2\70\1\167\5\0"
			+ "\2\70\1\0\1\70\1\0\3\70\1\0\1\170\3\0"
			+ "\1\70\1\0\13\70\7\0\7\70\1\0\17\70\1\171"
			+ "\4\70\2\0\3\70\5\0\1\171\1\70\1\0\1\70"
			+ "\1\0\3\70\5\0\1\70\1\0\13\70\7\0\7\70"
			+ "\1\0\7\70\1\171\14\70\2\0\3\70\5\0\1\70"
			+ "\1\171\1\0\1\70\1\0\3\70\5\0\1\70\1\0"
			+ "\13\70\7\0\3\70\1\74\1\70\1\74\1\172\1\0"
			+ "\1\70\1\172\1\173\4\70\1\173\12\70\1\74\1\70"
			+ "\2\0\2\70\1\74\5\0\1\70\1\173\1\0\1\173"
			+ "\1\0\3\70\5\0\1\70\1\0\13\70\7\0\1\4"
			+ "\6\5\1\0\2\5\1\174\16\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\17\5\1\175\1\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\11\5\1\176\7\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\12\5"
			+ "\1\76\6\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\5\5\1\177"
			+ "\13\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\7\5\1\200\11\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\7\5\1\201\5\5\1\202"
			+ "\3\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\3\5\1\203\15\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\4\5\1\204\14\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\3\5\1\205\15\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\5\5\1\206\2\5\1\207\1\5\1\210"
			+ "\6\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\21\5\1\4\2\5"
			+ "\2\0\1\5\1\202\1\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\5\5\1\211\13\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\14\5\1\212\1\213\3\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\15\5\1\214\3\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\3\5\1\215\15\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\11\5\1\216\7\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\17\5\1\217\1\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\14\5"
			+ "\1\220\4\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\4\5\1\221"
			+ "\14\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\10\5\1\222\10\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\11\5\1\223\3\5\1\224"
			+ "\3\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\15\5\1\225\3\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\3\5\1\226\15\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\5\5\1\227\13\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\1\5\1\230\17\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\15\5\1\231\3\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\3\70\4\232\1\0"
			+ "\3\232\5\70\1\232\5\70\1\232\3\70\1\232\1\70"
			+ "\2\0\1\70\2\232\5\0\2\70\1\0\1\232\1\0"
			+ "\3\70\5\0\1\70\1\0\3\70\2\232\5\70\1\232"
			+ "\7\0\34\233\1\0\4\233\1\234\52\233\1\235\4\233"
			+ "\1\132\1\233\1\132\3\233\1\132\1\233\1\132\2\233"
			+ "\1\132\3\233\1\132\1\236\1\237\1\0\3\132\1\236"
			+ "\1\240\1\132\24\233\1\237\17\233\5\136\1\36\4\136"
			+ "\1\36\1\136\1\36\3\136\1\36\1\136\1\36\2\136"
			+ "\1\36\3\136\2\36\1\241\1\0\6\36\24\136\1\241"
			+ "\50\136\1\242\10\136\1\243\44\136\7\4\1\0\1\4"
			+ "\1\244\3\4\1\245\16\4\2\0\3\4\5\0\2\4"
			+ "\1\0\1\4\1\0\3\4\5\0\1\4\1\0\13\4"
			+ "\7\0\7\4\1\0\4\4\1\246\2\4\1\247\2\4"
			+ "\1\250\11\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\7\0\7\4"
			+ "\1\0\2\4\1\251\1\4\1\252\6\4\1\253\10\4"
			+ "\2\0\3\4\5\0\2\4\1\0\1\4\1\0\3\4"
			+ "\5\0\1\4\1\0\13\4\7\0\7\4\1\0\3\4"
			+ "\1\254\20\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\7\0\7\4"
			+ "\1\0\12\4\1\255\11\4\2\0\3\4\5\0\2\4"
			+ "\1\0\1\4\1\0\3\4\5\0\1\4\1\0\13\4"
			+ "\7\0\7\4\1\0\4\4\1\256\17\4\2\0\3\4"
			+ "\5\0\2\4\1\0\1\4\1\0\3\4\5\0\1\4"
			+ "\1\0\13\4\17\0\1\257\1\260\1\0\1\261\3\0"
			+ "\1\262\4\0\1\263\2\0\1\264\13\0\1\150\62\0"
			+ "\1\265\113\0\1\266\100\0\1\267\115\0\1\270\100\0"
			+ "\1\271\113\0\1\272\100\0\1\273\115\0\1\274\61\0"
			+ "\1\4\6\5\1\0\21\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\6\5\1\275\4\5\7\0\1\4"
			+ "\6\5\1\0\21\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\6\5\1\276\4\5\7\0\1\4\6\5"
			+ "\1\0\21\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\4\5\1\277\6\5\7\0\1\4\6\5\1\0"
			+ "\21\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\6\5\1\300\4\5\7\0\1\4\6\5\1\0\21\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\5\5"
			+ "\1\301\5\5\7\0\3\70\1\167\1\70\1\167\1\70"
			+ "\1\0\7\70\1\72\7\70\1\73\2\70\1\167\1\70"
			+ "\2\0\2\70\1\167\5\0\1\73\1\72\1\0\1\70"
			+ "\1\0\3\70\5\0\1\70\1\0\13\70\12\0\1\167"
			+ "\1\0\1\167\24\0\1\167\5\0\1\167\46\0\3\70"
			+ "\1\302\1\70\1\302\1\70\1\303\22\70\1\302\1\70"
			+ "\2\0\2\70\1\302\5\0\2\70\1\0\1\70\1\0"
			+ "\3\70\1\0\1\303\3\0\1\70\1\0\13\70\7\0"
			+ "\1\4\6\5\1\0\10\5\1\304\10\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\13\5\1\76\5\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\1\5\1\76\17\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\10\5\1\305\10\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\11\5"
			+ "\1\217\7\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\3\5\1\306"
			+ "\15\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\7\5\1\176\11\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\20\5\1\202\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\15\5\1\307\3\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\14\5\1\76\4\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\12\5\1\310\6\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\3\5"
			+ "\1\106\13\5\1\311\1\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\12\5\1\305\6\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\1\5"
			+ "\1\312\17\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\17\5\1\313"
			+ "\1\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\1\5\1\314\17\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\5\5\1\315\13\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\21\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\1\202\12\5\7\0\1\4\6\5"
			+ "\1\0\1\5\1\316\17\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\1\5\1\317\17\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\11\5"
			+ "\1\305\3\5\1\320\3\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\12\5\1\202\6\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\3\5"
			+ "\1\321\15\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\3\5\1\322"
			+ "\15\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\5\5\1\76\13\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\1\202\20\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\7\5\1\202\11\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\10\5\1\323\10\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\1\5\1\202\17\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\3\70\4\232\1\0\3\232"
			+ "\4\70\1\324\1\232\5\70\1\232\1\325\2\70\1\232"
			+ "\1\70\2\0\1\70\2\232\5\0\1\325\1\324\1\0"
			+ "\1\232\1\0\3\70\5\0\1\70\1\0\3\70\2\232"
			+ "\5\70\1\232\7\0\34\233\1\0\4\233\1\134\52\233"
			+ "\1\132\24\233\1\132\1\233\1\0\3\233\1\132\1\234"
			+ "\52\233\1\235\24\233\1\235\1\233\1\0\3\233\1\235"
			+ "\1\234\50\233\4\326\1\233\3\326\5\233\1\326\5\233"
			+ "\1\326\3\233\1\326\1\233\1\0\2\233\2\326\1\134"
			+ "\7\233\1\326\16\233\2\326\5\233\1\326\7\233\41\0"
			+ "\1\234\45\0\3\136\4\327\1\136\3\327\5\136\1\327"
			+ "\5\136\1\327\2\136\1\242\1\327\4\136\2\327\1\136"
			+ "\1\243\6\136\1\327\16\136\2\327\5\136\1\327\43\136"
			+ "\1\0\52\136\7\4\1\0\2\4\1\145\21\4\2\0"
			+ "\3\4\5\0\2\4\1\0\1\4\1\0\3\4\5\0"
			+ "\1\4\1\0\13\4\7\0\7\4\1\0\6\4\1\330"
			+ "\15\4\2\0\3\4\5\0\2\4\1\0\1\4\1\0"
			+ "\3\4\5\0\1\4\1\0\13\4\7\0\7\4\1\0"
			+ "\1\331\23\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\7\0\7\4"
			+ "\1\0\3\4\1\332\5\4\1\333\12\4\2\0\3\4"
			+ "\5\0\2\4\1\0\1\4\1\0\3\4\5\0\1\4"
			+ "\1\0\13\4\7\0\7\4\1\0\12\4\1\334\11\4"
			+ "\2\0\3\4\5\0\2\4\1\0\1\4\1\0\3\4"
			+ "\5\0\1\4\1\0\13\4\7\0\7\4\1\0\1\335"
			+ "\3\4\1\256\17\4\2\0\3\4\5\0\2\4\1\0"
			+ "\1\4\1\0\3\4\5\0\1\4\1\0\13\4\7\0"
			+ "\7\4\1\0\16\4\1\336\5\4\2\0\3\4\5\0"
			+ "\2\4\1\0\1\4\1\0\3\4\5\0\1\4\1\0"
			+ "\13\4\7\0\7\4\1\0\14\4\1\337\7\4\2\0"
			+ "\3\4\5\0\2\4\1\0\1\4\1\0\3\4\5\0"
			+ "\1\4\1\0\13\4\7\0\7\4\1\0\4\4\1\333"
			+ "\17\4\2\0\3\4\5\0\2\4\1\0\1\4\1\0"
			+ "\3\4\5\0\1\4\1\0\13\4\7\0\7\4\1\0"
			+ "\10\4\1\340\13\4\2\0\3\4\5\0\2\4\1\0"
			+ "\1\4\1\0\3\4\5\0\1\4\1\0\13\4\7\0"
			+ "\7\4\1\0\1\335\23\4\2\0\3\4\5\0\2\4"
			+ "\1\0\1\4\1\0\3\4\5\0\1\4\1\0\13\4"
			+ "\20\0\1\341\3\0\1\342\105\0\1\343\2\0\1\344"
			+ "\2\0\1\345\76\0\1\346\1\0\1\347\6\0\1\350"
			+ "\76\0\1\351\115\0\1\352\100\0\1\353\103\0\1\266"
			+ "\161\0\1\354\72\0\1\355\62\0\1\356\73\0\1\272"
			+ "\161\0\1\357\72\0\1\360\62\0\1\361\62\0\1\4"
			+ "\6\5\1\0\21\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\10\5\1\362\2\5\7\0\1\4\6\5"
			+ "\1\0\21\5\1\4\2\5\2\0\3\5\5\0\1\5"
			+ "\1\362\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\21\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\5\5"
			+ "\1\362\5\5\7\0\1\4\6\5\1\0\21\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\7\5\1\362"
			+ "\3\5\7\0\1\4\6\5\1\0\21\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\3\5\1\363\7\5"
			+ "\7\0\3\70\1\302\1\70\1\302\1\70\1\0\2\70"
			+ "\1\173\4\70\1\173\12\70\1\302\1\70\2\0\2\70"
			+ "\1\302\5\0\1\70\1\173\1\0\1\173\1\0\3\70"
			+ "\5\0\1\70\1\0\13\70\12\0\1\302\1\0\1\302"
			+ "\24\0\1\302\5\0\1\302\46\0\1\4\6\5\1\0"
			+ "\17\5\1\364\1\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\15\5"
			+ "\1\202\3\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\4\5\1\231"
			+ "\14\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\16\5\1\365\2\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\15\5\1\76\3\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\16\5\1\305\2\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\10\5\1\310\10\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\12\5\1\366\6\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\21\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\2\5\1\202\10\5\7\0\1\4\6\5\1\0\12\5"
			+ "\1\367\6\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\1\370\20\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\3\5\1\371\15\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\20\5\1\372\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\7\5\1\76\11\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\21\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\1\76\12\5\7\0\7\70\1\0\17\70\1\373\4\70"
			+ "\2\0\3\70\5\0\1\373\1\70\1\0\1\70\1\0"
			+ "\3\70\5\0\1\70\1\0\13\70\7\0\7\70\1\0"
			+ "\7\70\1\373\14\70\2\0\3\70\5\0\1\70\1\373"
			+ "\1\0\1\70\1\0\3\70\5\0\1\70\1\0\13\70"
			+ "\7\0\3\233\4\132\1\233\3\132\5\233\1\132\5\233"
			+ "\1\132\3\233\1\132\1\233\1\0\2\233\2\132\1\134"
			+ "\7\233\1\132\16\233\2\132\5\233\1\132\7\233\3\136"
			+ "\4\36\1\136\3\36\5\136\1\36\5\136\1\36\2\136"
			+ "\1\242\1\36\4\136\2\36\1\136\1\243\6\136\1\36"
			+ "\16\136\2\36\5\136\1\36\7\136\7\4\1\0\4\4"
			+ "\1\374\17\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\7\0\7\4"
			+ "\1\0\3\4\1\332\20\4\2\0\3\4\5\0\2\4"
			+ "\1\0\1\4\1\0\3\4\5\0\1\4\1\0\13\4"
			+ "\7\0\7\4\1\0\2\4\1\375\21\4\2\0\3\4"
			+ "\5\0\2\4\1\0\1\4\1\0\3\4\5\0\1\4"
			+ "\1\0\13\4\7\0\7\4\1\0\1\4\1\375\22\4"
			+ "\2\0\3\4\5\0\2\4\1\0\1\4\1\0\3\4"
			+ "\5\0\1\4\1\0\13\4\7\0\7\4\1\0\5\4"
			+ "\1\376\16\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\7\0\7\4"
			+ "\1\0\1\4\1\332\22\4\2\0\3\4\5\0\2\4"
			+ "\1\0\1\4\1\0\3\4\5\0\1\4\1\0\13\4"
			+ "\7\0\7\4\1\0\7\4\1\377\14\4\2\0\3\4"
			+ "\5\0\2\4\1\0\1\4\1\0\3\4\5\0\1\4"
			+ "\1\0\13\4\7\0\7\4\1\0\5\4\1\u0100\16\4"
			+ "\2\0\3\4\5\0\2\4\1\0\1\4\1\0\3\4"
			+ "\5\0\1\4\1\0\13\4\7\0\7\4\1\0\20\4"
			+ "\1\u0101\3\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\21\0\1\262"
			+ "\112\0\1\u0102\100\0\1\u0103\111\0\1\u0104\5\0\1\u0105"
			+ "\107\0\1\u0106\74\0\1\u0107\3\0\1\353\120\0\1\u0108"
			+ "\104\0\1\u0109\76\0\1\u0105\112\0\1\u010a\76\0\1\u0107"
			+ "\142\0\1\u010b\43\0\1\355\1\u010c\4\355\1\u010c\21\355"
			+ "\1\0\2\355\1\0\1\u010c\3\355\1\u010c\2\0\1\355"
			+ "\1\u010c\2\355\1\u010c\1\355\1\0\1\u010c\1\355\6\u010c"
			+ "\1\355\1\u010c\13\355\1\0\1\u010c\3\0\1\u010c\22\0"
			+ "\1\266\42\0\1\354\66\0\1\u010d\43\0\1\360\1\u010e"
			+ "\4\360\1\u010e\21\360\1\0\2\360\1\0\1\u010e\3\360"
			+ "\1\u010e\2\0\1\360\1\u010e\2\360\1\u010e\1\360\1\0"
			+ "\1\u010e\1\360\6\u010e\1\360\1\u010e\13\360\1\0\1\u010e"
			+ "\3\0\1\u010e\22\0\1\272\42\0\1\357\22\0\1\4"
			+ "\5\5\1\u010f\1\0\21\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\21\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\12\5\1\u010f\7\0\1\4\6\5\1\0\7\5\1\310"
			+ "\11\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\1\4\6\5\1\0\21\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\76\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\4\5\1\76\14\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\3\5\1\u0110\15\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\1\5\1\u0111\17\5\1\4\2\5\2\0\3\5\5\0"
			+ "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\5\0"
			+ "\1\5\1\0\13\5\7\0\1\4\6\5\1\0\4\5"
			+ "\1\u0112\14\5\1\4\2\5\2\0\3\5\5\0\2\5"
			+ "\1\0\1\5\1\0\1\4\1\5\1\4\5\0\1\5"
			+ "\1\0\13\5\7\0\1\4\6\5\1\0\4\5\1\u0113"
			+ "\14\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\13\5\7\0\7\4\1\0\7\4\1\u0114\14\4\2\0"
			+ "\3\4\5\0\2\4\1\0\1\4\1\0\3\4\5\0"
			+ "\1\4\1\0\13\4\7\0\7\4\1\0\12\4\1\375"
			+ "\11\4\2\0\3\4\5\0\2\4\1\0\1\4\1\0"
			+ "\3\4\5\0\1\4\1\0\13\4\7\0\7\4\1\0"
			+ "\17\4\1\u0115\4\4\2\0\3\4\5\0\2\4\1\0"
			+ "\1\4\1\0\3\4\5\0\1\4\1\0\13\4\7\0"
			+ "\7\4\1\0\12\4\1\u0116\11\4\2\0\3\4\5\0"
			+ "\2\4\1\0\1\4\1\0\3\4\5\0\1\4\1\0"
			+ "\13\4\7\0\7\4\1\0\13\4\1\u0117\10\4\2\0"
			+ "\3\4\5\0\2\4\1\0\1\4\1\0\3\4\5\0"
			+ "\1\4\1\0\13\4\23\0\1\u0118\105\0\1\u0104\105\0"
			+ "\1\u0119\105\0\1\u0119\112\0\1\u011a\102\0\1\u0104\114\0"
			+ "\1\u011b\104\0\1\u011c\121\0\1\u011d\122\0\1\355\106\0"
			+ "\1\360\42\0\1\4\1\5\1\u011e\4\5\1\0\21\5"
			+ "\1\4\2\5\2\0\3\5\5\0\2\5\1\0\1\5"
			+ "\1\0\1\4\1\5\1\4\5\0\1\5\1\0\13\5"
			+ "\7\0\1\4\6\5\1\0\15\5\1\u011f\3\5\1\4"
			+ "\2\5\2\0\3\5\5\0\2\5\1\0\1\5\1\0"
			+ "\1\4\1\5\1\4\5\0\1\5\1\0\13\5\7\0"
			+ "\1\4\6\5\1\0\2\5\1\76\16\5\1\4\2\5"
			+ "\2\0\3\5\5\0\2\5\1\0\1\5\1\0\1\4"
			+ "\1\5\1\4\5\0\1\5\1\0\13\5\7\0\1\4"
			+ "\6\5\1\0\17\5\1\176\1\5\1\4\2\5\2\0"
			+ "\3\5\5\0\2\5\1\0\1\5\1\0\1\4\1\5"
			+ "\1\4\5\0\1\5\1\0\13\5\7\0\1\4\6\5"
			+ "\1\0\1\5\1\226\17\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\7\4\1\0\5\4"
			+ "\1\u0120\16\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\7\0\7\4"
			+ "\1\0\1\333\23\4\2\0\3\4\5\0\2\4\1\0"
			+ "\1\4\1\0\3\4\5\0\1\4\1\0\13\4\7\0"
			+ "\7\4\1\0\15\4\1\375\6\4\2\0\3\4\5\0"
			+ "\2\4\1\0\1\4\1\0\3\4\5\0\1\4\1\0"
			+ "\13\4\7\0\7\4\1\0\10\4\1\375\13\4\2\0"
			+ "\3\4\5\0\2\4\1\0\1\4\1\0\3\4\5\0"
			+ "\1\4\1\0\13\4\26\0\1\u0121\111\0\1\u0119\113\0"
			+ "\1\u0122\101\0\1\u0123\107\0\1\u0124\63\0\1\4\1\5"
			+ "\1\u0125\4\5\1\0\21\5\1\4\2\5\2\0\3\5"
			+ "\5\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"
			+ "\5\0\1\5\1\0\13\5\7\0\1\4\6\5\1\0"
			+ "\21\5\1\4\2\5\2\0\3\5\5\0\2\5\1\0"
			+ "\1\5\1\0\1\4\1\5\1\4\5\0\1\5\1\0"
			+ "\1\5\1\76\11\5\7\0\7\4\1\0\10\4\1\u0126"
			+ "\13\4\2\0\3\4\5\0\2\4\1\0\1\4\1\0"
			+ "\3\4\5\0\1\4\1\0\13\4\24\0\1\u0127\101\0"
			+ "\1\u0105\123\0\1\u0119\101\0\1\u0119\66\0\7\4\1\0"
			+ "\1\375\23\4\2\0\3\4\5\0\2\4\1\0\1\4"
			+ "\1\0\3\4\5\0\1\4\1\0\13\4\27\0\1\u0128"
			+ "\76\0\1\u0119\76\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[19241];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state
	 * <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\3\0\24\1\2\11\11\1\1\11\1\1\1\11\1\1"
			+ "\1\11\7\1\1\11\5\1\1\11\46\1\1\11\2\1"
			+ "\3\11\6\1\4\0\1\11\5\0\6\1\1\0\43\1"
			+ "\1\11\6\1\1\11\13\1\16\0\6\1\1\0\35\1"
			+ "\5\0\1\1\6\0\1\1\2\0\1\1\1\0\20\1"
			+ "\15\0\11\1\1\0\1\11\4\0\3\1\4\0\2\1"
			+ "\2\0";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[296];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}
	/**
	 * the input device
	 */
	private java.io.Reader zzReader;
	/**
	 * the current state of the DFA
	 */
	private int zzState;
	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;
	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;
	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;
	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;
	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;
	/**
	 * number of newlines encountered up to the start of the matched text
	 */
	private int yyline;
	/**
	 * the number of characters up to the start of the matched text
	 */
	private int yychar;
	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;
	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;
	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */
	/**
	 * Constructor. This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public NXCTokenMaker() {
		super();
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start, end, tokenType, so, true);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos - 1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start, end, tokenType, so);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 * occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start, end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 * it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[]{"//", null};
	}

	/**
	 * Returns the first token in the linked list of tokens generated
	 * from
	 * <code>text</code>. This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 * <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 * the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 * <code>false</code>.
	 * @exception IOException if any I/O-Error occurs.
	 */
	private boolean zzRefill1() throws java.io.IOException {
		return zzCurrentPos >= s.offset + s.count;
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		//zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
	}

	/**
	 * Creates a new scanner
	 * There is also a java.io.InputStream version of this constructor.
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public NXCTokenMaker(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	public NXCTokenMaker(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 180) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 *
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead,
				zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream    
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true;            /* indicate end of file */
		zzEndRead = zzStartRead;  /* invalidate buffer    */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 * A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 * This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill1();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 27: {
					addToken(Token.PREPROCESSOR);
				}
				case 31:
					break;
				case 6: {
					addNullToken();
					return firstToken;
				}
				case 32:
					break;
				case 25: {
					addToken(Token.LITERAL_CHAR);
				}
				case 33:
					break;
				case 22: {
					yybegin(YYINITIAL);
					addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
				}
				case 34:
					break;
				case 21: {
					start = zzMarkedPos - 2;
					yybegin(MLC);
				}
				case 35:
					break;
				case 9: {
					addToken(Token.WHITESPACE);
				}
				case 36:
					break;
				case 24: {
					addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
				}
				case 37:
					break;
				case 17: {
					addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
				}
				case 38:
					break;
				case 26: {
					addToken(Token.ERROR_STRING_DOUBLE);
				}
				case 39:
					break;
				case 15: {
					addToken(Token.LITERAL_NUMBER_FLOAT);
				}
				case 40:
					break;
				case 16: {
					addToken(Token.RESERVED_WORD);
				}
				case 41:
					break;
				case 10: {
					addToken(Token.SEPARATOR);
				}
				case 42:
					break;
				case 5: {
					addToken(Token.IDENTIFIER);
				}
				case 43:
					break;
				case 13: {
					addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
					addNullToken();
					return firstToken;
				}
				case 44:
					break;
				case 20: {
					start = zzMarkedPos - 2;
					yybegin(EOL_COMMENT);
				}
				case 45:
					break;
				case 7: {
					addToken(Token.ERROR_CHAR);
					addNullToken();
					return firstToken;
				}
				case 46:
					break;
				case 8: {
					addToken(Token.ERROR_STRING_DOUBLE);
					addNullToken();
					return firstToken;
				}
				case 47:
					break;
				case 23: {
					addToken(Token.DATA_TYPE);
				}
				case 48:
					break;
				case 1: {
					addToken(Token.ERROR_IDENTIFIER);
				}
				case 49:
					break;
				case 18: {
					addToken(Token.ERROR_CHAR);
				}
				case 50:
					break;
				case 28: {
					addToken(Token.LITERAL_BOOLEAN);
				}
				case 51:
					break;
				case 19: {
					addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
				}
				case 52:
					break;
				case 30: {
					int temp = zzStartRead;
					addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
					addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_EOL);
					start = zzMarkedPos;
				}
				case 53:
					break;
				case 2: {
					if (NXCDefs.constants.containsKey(yytext())) {
						addToken(Token.VARIABLE);
					} else if (PredefinedFunction.getFunction(yytext()) != null) {
						addToken(Token.FUNCTION);
					} else {
						addToken(Token.IDENTIFIER);
					}
				}
				case 54:
					break;
				case 29: {
					int temp = zzStartRead;
					addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
					addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
					start = zzMarkedPos;
				}
				case 55:
					break;
				case 14: {
					addToken(Token.ERROR_NUMBER_FORMAT);
				}
				case 56:
					break;
				case 3: {
					addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
				}
				case 57:
					break;
				case 4: {
					addToken(Token.OPERATOR);
				}
				case 58:
					break;
				case 11: {
				}
				case 59:
					break;
				case 12: {
					addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
					return firstToken;
				}
				case 60:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						switch (zzLexicalState) {
							case EOL_COMMENT: {
								addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
								addNullToken();
								return firstToken;
							}
							case 297:
								break;
							case YYINITIAL: {
								addNullToken();
								return firstToken;
							}
							case 298:
								break;
							case MLC: {
								addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
								return firstToken;
							}
							case 299:
								break;
							default:
								return null;
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}
}